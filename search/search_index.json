{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"init","text":""},{"location":"#innovating-at-the-intersection-of-technology-and-community","title":"Innovating at the Intersection of Technology and Community","text":"<p>As Director of Fab Lab \u00cdsafj\u00f6r\u00f0ur, I help bridge the gap between education, industry, and community through innovation and digital fabrication.</p> <p>My background spans electronics, communication, CAD, CNC machining, and programming, combining hands-on making with systems thinking.</p> <p>I\u2019m passionate about using technology to drive meaningful change, foster collaboration, and support public sector innovation.</p> <pre><code>             .--.           .---.        .-.                   .-.                       .--.---.         \n         .---|--|   .-.     | A |  .---. |~|    .--.     .---. |b|    .--.           .---|--|***|   .-.-.  .---.\n      .--|===| h|---|_|--.__| S |--|:::| |n|-==-|==|---. |:::| |l|-==-|==|---.    .--|===|**|===|---|s|*|--|:::|\n      |%%|ino| t|===| |~~|%%| C |--|   |_|v|CATS|  |___|-|   |_|e|MEME|  |___|-.|-|%%|txt|--|~m~|===|u|*|~~|   |\n      |md|   | m|===| |==|  | I |  |:::|=|i|    |py|---|=|:::|=|n|****|nc|---|=||=|md|   |  | i |===|d| |==|:::|\n      |  |   | l|css|_|__|  | I |__|bin| |m|    |  |svg|C|   | |d|    |  |hex| || |  |   |  | n |git|o| |__|zsh|\n      |~~|===|--|===|~|~~|%%|~~~|--|:::|=|~|----|==|---|=|:::|=|~|----|==|---|=||=|~~|===|--|~t~|===|~|~|~~|:::|\n      ^--^---'--^---^-^--^--^---'--^---^-^-^-==-^--^---^-'---^-^-^-==-^--^---^-'^-^--^---'--^---'---^-^-^--^---^\n</code></pre>"},{"location":"How-I-Work/","title":"How I Work","text":"<p>This section is a window into how I approach projects, solve problems, and build systems, both technically and practically. It covers the tools I use, the methods I rely on, and the mindset I bring into my work as a maker, educator, and technician.</p> <p>Each section reflects a part of my workflow, not just what I use, but how and why I use it.</p> <ul> <li> <p>Technical</p> <p>Tools I use every day, operating systems, terminal tools, editors, programming languages, and platforms for embedded and digital design.</p> </li> <li> <p>Logical</p> <p>How I solve problems, prototype quickly, debug effectively, and learn by doing.</p> </li> <li> <p>Systematic Thinking</p> <p>My approach to innovation, layered development, documenting as I go, and managing time and resources across projects.</p> </li> <li> <p>Practical</p> <p>The habits and practices that support communication, collaboration, and staying aware of what's happening around me.</p> </li> </ul> <p></p> <p>Troubleshooting on a high speed train reading from Leon to Madrid, Spain.</p>"},{"location":"How-I-Work/logical/","title":"\ud83e\udde0 Logical","text":"<p>Logical thinking is definitely my comfort zone and something that comes naturally to me. I\u2019ve learned to channel it into strengths and stay aware of its limitations. It helps me break down problems, test assumptions, and make thoughtful decisions, whether I\u2019m debugging a circuit, planning a workshop, or collaborating with others. </p> <p>This section explores four areas:</p> <ul> <li> <p>Critical Thinking   How I question assumptions, reason through challenges, and pay attention to the details that matter.</p> </li> <li> <p>Decision-Making   How I use pattern recognition and analysis to choose paths forward, even when the answer isn\u2019t obvious.</p> </li> <li> <p>Problem Solving   How I approach problem solving, whether it\u2019s general, electronics-based, or programming related.</p> </li> <li> <p>Rapid Prototyping   My mindset around fast iterations, working with what I have, and learning through action.</p> </li> </ul> <p>These skills support everything I do\u2014from teaching and prototyping to troubleshooting and planning.</p>"},{"location":"How-I-Work/logical/critical_thinking/","title":"Critical Thinking","text":"<p>Critical thinking is a valuable skill to nurture I use it in various situation. It helps me ask better questions, see the bigger picture, and avoid wasting time on false assumptions.</p> <p>Whether I\u2019m teaching, designing a system, reviewing ideas with a team, or just trying to get something to work, this mindset helps me stay grounded and focused on what actually matters.</p>"},{"location":"How-I-Work/logical/critical_thinking/#reasoning","title":"Reasoning","text":"<p>I don\u2019t rush into solutions I like to start with asking why. Why is this happening? Why is this the approach we\u2019re taking? Why hasn\u2019t it worked yet?</p> <p>Reasoning helps me:</p> <ul> <li>Work from observations instead of assumptions</li> <li>Understand how something is supposed to behave before reacting</li> <li>Break complex issues into simpler cause-and-effect steps</li> <li>Explain my thinking clearly to others (or to myself)</li> </ul> <p>Sometimes this means sketching diagrams. Other times, just talking it out loud reveals the gap.</p>"},{"location":"How-I-Work/logical/critical_thinking/#attention-to-detail","title":"Attention to Detail","text":"<p>Most misunderstandings, mistakes, or confusion come from something small. A misplaced word. A missed context. A setting left unchecked.</p> <p>Paying attention to detail helps me:</p> <ul> <li>Catch errors early, whether technical or communicative</li> <li>Review content and ideas more thoughtfully</li> <li>Stay consistent across design, planning, and collaboration</li> </ul> <p>This isn\u2019t about being overly careful\u2014it\u2019s about knowing when details matter, and taking a second look before moving on.</p> <p></p> <p>Explaining process structure at Fab Lab Le\u00f3n during a workshop session.</p>"},{"location":"How-I-Work/logical/critical_thinking/#summary","title":"Summary","text":"<p>Critical thinking shows up in every part of how I work\u2014from planning to teaching to fixing things. It gives me the tools to pause, reflect, and move forward with clarity. And while it\u2019s not always visible, it\u2019s behind almost everything I do.</p>"},{"location":"How-I-Work/logical/decision_making/","title":"Decision-Making","text":"<p>Every day brings decisions, big and small and I try to make mine intentionally. Whether it's choosing the right tool, planning a project, or guiding a team, good decision-making is about balancing speed with clarity.</p> <p>I don't always aim for the \"perfect\" decision. I aim for one that's well-informed, time-conscious, and adaptable if new info comes in.</p>"},{"location":"How-I-Work/logical/decision_making/#pattern-recognition","title":"Pattern Recognition","text":"<p>Years of hands-on work help me see patterns quickly in behavior, in signals, in how things break, and how they usually get fixed.</p> <p>Pattern recognition helps me:</p> <ul> <li>Spot recurring issues across tools, systems, or people</li> <li>Anticipate problems before they fully surface</li> <li>Reuse successful strategies in new contexts</li> </ul> <p>It's not magic. It's practice and paying attention to what has worked, what hasn\u2019t, and what feels familiar.</p>"},{"location":"How-I-Work/logical/decision_making/#analytical-skills","title":"Analytical Skills","text":"<p>When things get messy, I lean on analysis. I break things down, look at the pieces, and work through how they interact. I try not to rely on hunches unless I've earned them through past experience.</p> <p>I use analysis to:</p> <ul> <li>Understand tradeoffs and side effects</li> <li>Compare options when none are obvious</li> <li>Justify decisions when others need to be on board</li> </ul> <p>Sometimes this means making a chart, sketching a flow, or just sitting quietly to think it through.</p>"},{"location":"How-I-Work/logical/decision_making/#summary","title":"Summary","text":"<p>Decision-making isn\u2019t just a gut feeling, it\u2019s a process shaped by observation, reflection, and action. I don\u2019t always get it right on the first try, but I try to get it right over time by listening, adjusting, and learning as I go.</p>"},{"location":"How-I-Work/logical/problemsolving/","title":"Problem Solving","text":"<p>Repairing, fixing, and problem solving is probably one of my strongest traits. I studied it in school, and I\u2019ve built up experience\u2014and a lot of fun stories\u2014over the years. I\u2019ve always enjoyed the challenge of figuring out how things work\u2014and more importantly, why they don\u2019t. Whether it\u2019s a broken wire or a broken workflow, I enjoy digging in and making it work again.</p>"},{"location":"How-I-Work/logical/problemsolving/#foundation","title":"Foundation","text":"<p>My approach to problem solving is built on a strong foundation in electronics. That\u2019s where I first learned to isolate issues, trace signals, and find faults using logic and observation. Over time, I\u2019ve carried those skills into working with code, systems, and machines. I usually start by looking for clarity\u2014understanding how a normal state should work. Once I see that, it\u2019s easier to spot what\u2019s broken.</p>"},{"location":"How-I-Work/logical/problemsolving/#electronics","title":"Electronics","text":"<p>This is where it started for me. Debugging electronics taught me to be patient, methodical, and observant. I\u2019ve learned to look for small signs: a voltage drop, a pattern glitch, or a warm component. I don't just test for failure\u2014I try to understand the conditions around it.</p> <p>Here\u2019s my typical workflow when approaching an electronic issue:</p> <ol> <li>Visual inspection</li> <li>Feel for heat</li> <li>Smell (burnt or chemical smells can say a lot)</li> <li>Check obvious voltages and grounds (GND should always be 0\u202fV\u2014if it\u2019s floating, it won\u2019t show correctly)</li> <li>I primarily test using voltage. From that, I can calculate current and find shorts or broken connections.</li> </ol>"},{"location":"How-I-Work/logical/problemsolving/#favorite-test-tools","title":"Favorite Test Tools","text":"<ul> <li>Scope - for seeing what the system won't tell you</li> <li>Freeze spray - for catching thermal issues</li> <li>Short wire - to bypass or bridge suspected faults</li> <li>Square wave test - for tracing signals across boards</li> <li>Isopropanol or rosin atomizer - to detect hot spots or weak joints</li> </ul>"},{"location":"How-I-Work/logical/problemsolving/#code-systems","title":"Code / Systems","text":"<p>When it comes to code or system-level problems, I apply the same mindset: isolate, test, observe. I avoid assumptions, and I like to start by asking: What should this actually do? Then I compare that to what\u2019s happening. Whether I\u2019m debugging firmware or troubleshooting automation scripts, I treat it like signal tracing\u2014just in a different language.</p>"},{"location":"How-I-Work/logical/problemsolving/#machines","title":"Machines","text":"<p>Machines are a different kind of system, but the thinking is the same. I listen for changes in sound, check physical wear, and look for patterns in failure. I treat mechanical troubleshooting as a conversation\u2014the machine is giving signals, you just have to pay attention.</p>"},{"location":"How-I-Work/logical/problemsolving/#general","title":"General","text":"<p>No matter the problem, I try to avoid jumping to conclusions. I prefer to slow down, observe carefully, and start with what I know. I often sketch out the system or talk it through out loud\u2014anything to get it out of my head and into something I can interact with.</p> <p>I don\u2019t aim for elegant solutions right away. I aim for understanding. Once I have that, the fix usually follows.</p> <p>I also believe in testing early. If I have a hunch, I try to prove or disprove it with minimal effort before diving deeper. It saves time, avoids guesswork, and usually leads me somewhere useful\u2014even if it\u2019s not where I expected.</p>"},{"location":"How-I-Work/logical/problemsolving/#fixing","title":"Fixing","text":"<p>After identifying the problem, I work on a fix and decide whether it\u2019s acceptable long-term\u2014depending on how critical the system is. Sometimes a temporary solution is fine as long as it buys time until the proper spare part can be sourced.</p> <p></p> <p>One memorable on-the-spot fix: five minutes before going live, the broadcast mast wouldn\u2019t raise. I quickly identified a faulty relay, grabbed a screwdriver, shorted it\u2014and we went live on time.</p>"},{"location":"How-I-Work/logical/rapid_prototyping/","title":"Rapid Prototyping","text":"<p>I tend to work in fast cycles \u2014 building things quickly to test ideas and see what works in practice.</p> <p>This approach helps me avoid overthinking or spending too much time planning something that might not work. I\u2019d rather build a rough version, learn from it, and iterate. It\u2019s less about polish and more about momentum.</p>"},{"location":"How-I-Work/logical/rapid_prototyping/#why-rapid-prototyping","title":"Why \"Rapid\" Prototyping?","text":"<p>Prototyping doesn\u2019t always have to be fast. Sometimes it\u2019s about detail, long-term design, or showing something to a client. Rapid prototyping is different\u2014it's more about speed, testing ideas quickly, and learning fast.</p> <p>It\u2019s not about skipping quality, it\u2019s about reducing hesitation. The goal is to try something real before spending too long thinking about it. If it works, great. If not, I\u2019ve only lost time I was willing to spend.</p>"},{"location":"How-I-Work/logical/rapid_prototyping/#core-principles","title":"Core Principles","text":"<ul> <li>Start before you're ready - I don\u2019t wait for the perfect conditions. If I have an idea, I sketch it, mock it up, or build a version with what I\u2019ve got.</li> <li>Use what\u2019s available - I love working with scrap, leftovers, and constraints. They help me move faster and stay creative.</li> <li>Function over form - My goal is to get something working, not to make it look pretty (at least not right away).</li> <li>Test early and often - I like getting feedback as soon as possible, even if the idea isn\u2019t fully baked.</li> </ul>"},{"location":"How-I-Work/logical/rapid_prototyping/#tools-i-often-use","title":"Tools I Often Use","text":"<ul> <li>Cardboard and tape for physical layouts</li> <li>Breadboards and jumpers for electronics</li> <li>Markdown and plain text for documentation drafts</li> <li>Microcontrollers like RP2040 for embedded ideas</li> <li>Scripting and CLI tools for quick automation</li> </ul>"},{"location":"How-I-Work/logical/rapid_prototyping/#lessons-from-prototyping","title":"Lessons from Prototyping","text":"<ul> <li>Sometimes the prototype is the final version.</li> <li>Sometimes it\u2019s a total failure and that\u2019s fine.   I always learn something, even if it\u2019s just what not to do.</li> <li>The faster I try something, the faster I can move on (or double down).</li> </ul>"},{"location":"How-I-Work/logical/rapid_prototyping/#where-i-apply-it","title":"Where I Apply It","text":"<p>This mindset shows up across everything I do:</p> <ul> <li>Electronics - building test circuits before designing a PCB</li> <li>Code - writing quick scripts or modifying examples to test ideas</li> <li>Workshops - prototyping a teaching method before rolling it out</li> <li>Machines - rigging a temporary fix to see if a solution is viable</li> </ul> <p></p> <p>A quick test to see if I could make an injection mold using laser-cut acrylic. Took less than an hour to design and assemble. I used hot glue for test results \u2014 it worked well enough to prove the idea.</p>"},{"location":"How-I-Work/practical/","title":"\ud83d\udee0\ufe0f Practical","text":"<p>Practical skills are the habits and mindsets that support how I work with others. They show up in teaching, collaboration, communication, and even just paying attention to what's going on around me.</p> <p>These are the less visible parts of my workflow, but they\u2019re often the most important in making projects run smoothly and helping people feel supported.</p> <p>This section includes:</p> <ul> <li> <p>Communication   How I listen, talk, write, and adapt my communication in teams, teaching, and collaboration.</p> </li> <li> <p>Situational Awareness   How I stay alert to what's happening around me, from technical signals to human dynamics.</p> </li> <li> <p>Emotional Awareness   How I recognize and respond to emotions\u2014both in others and in myself\u2014to keep work grounded and people-centered.</p> </li> </ul>"},{"location":"How-I-Work/practical/communication/","title":"Communication","text":"<p>Clear and practical communication is essential to my work, especially when collaborating with students, teams, or external partners. I prefer to keep things lightweight, visual, and structured whenever possible. I also believe in sharing work early, even if it\u2019s incomplete, to get feedback and improve iteratively. Teaching has taught me that clarity is more important than polish, and that showing is more effective than telling.</p>"},{"location":"How-I-Work/practical/communication/#listening","title":"Listening","text":"<p>Listening isn\u2019t passive it\u2019s a skill I try to practice intentionally. Whether I\u2019m working with a team or one-on-one, I aim to:</p> <ul> <li>Listen without interrupting  </li> <li>Watch for what\u2019s not being said  </li> <li>Ask clarifying questions to make sure I actually understand  </li> </ul> <p>Listening well helps me identify issues early, improve collaboration, and avoid making assumptions.</p>"},{"location":"How-I-Work/practical/communication/#talking","title":"Talking","text":"<p>When I speak, I aim for clarity. I try to adapt my tone and vocabulary depending on who I\u2019m speaking with\u2014whether it\u2019s a student, a colleague, or a guest. I prefer not to overexplain, but I\u2019m always happy to break something down if someone\u2019s stuck.</p> <p>Sometimes I use analogies or metaphors to explain technical topics. If I see someone get lost, I take a step back and reframe the idea in simpler terms.</p>"},{"location":"How-I-Work/practical/communication/#reading","title":"Reading","text":"<p>Reading is part of how I gather context whether I\u2019m reviewing documentation, student submissions, or project proposals. I try to read:</p> <ul> <li>Slowly the first time  </li> <li>With curiosity, not judgment  </li> <li>Looking for both meaning and tone  </li> </ul> <p>I also try to be aware of how I read things under pressure, so I don\u2019t misinterpret short or vague messages.</p>"},{"location":"How-I-Work/practical/communication/#writing","title":"Writing","text":"<p>I prefer to write clearly and concisely. I use Markdown for most of my documentation and note-taking, and I often rely on visual elements like bullet points, headers, and diagrams to help structure the message.</p> <p>When I write, I aim to:</p> <ul> <li>Keep the tone friendly but direct  </li> <li>Use simple words over complex ones  </li> <li>Share early and revise based on feedback  </li> </ul> <p>Writing helps me think, but it also helps others follow what I\u2019m doing\u2014especially in async collaboration.</p>"},{"location":"How-I-Work/practical/communication/#perspective","title":"Perspective","text":"<p>Communication isn\u2019t one-size-fits-all. I try to understand where others are coming from what they know, how they feel, and what they might need from me.</p> <p>This applies especially in international or multicultural settings, where assumptions can lead to confusion. I try to:</p> <ul> <li>Adapt how I explain things depending on context  </li> <li>Avoid jargon unless I know the audience  </li> <li>Consider how tone and phrasing might be received  </li> </ul>"},{"location":"How-I-Work/practical/communication/#negotiating","title":"Negotiating","text":"<p>Sometimes communication involves disagreement or tension. I don\u2019t mind this\u2014as long as we stay respectful and focused on solving the issue.</p> <p>I try to:</p> <ul> <li>Stay calm and clear, especially when emotions are high  </li> <li>Look for common goals, not just positions  </li> <li>Know when to stand firm and when to let go  </li> </ul> <p>Negotiation doesn\u2019t always mean getting my way. It often means helping everyone feel heard and finding a workable outcome.</p>"},{"location":"How-I-Work/practical/communication/#working-in-teams","title":"Working in Teams","text":"<p>Good team communication isn\u2019t just about talking\u2014it\u2019s about rhythm. I\u2019ve found that keeping people updated, giving quick feedback, and agreeing on how we\u2019ll work together makes a big difference.</p> <p>When I work in teams, I try to:</p> <ul> <li>Check in regularly (but not constantly)  </li> <li>Ask for input before making big changes  </li> <li>Give credit openly and generously  </li> </ul>"},{"location":"How-I-Work/practical/communication/#working-with-individuals","title":"Working with Individuals","text":"<p>Working one-on-one requires a slightly different tone. I try to be present, encouraging, and aware of how someone prefers to communicate.</p> <p>This applies whether I\u2019m mentoring, collaborating, or just helping someone figure something out. I try to:</p> <ul> <li>Give honest, constructive feedback  </li> <li>Ask questions before offering advice  </li> <li>Match their pace, not rush ahead  </li> </ul> <p>Sometimes, listening and encouragement are more valuable than solving the problem right away.</p>"},{"location":"How-I-Work/practical/communication/#tools-and-preferences","title":"Tools and Preferences","text":"<p>For my own workflow, I prefer to keep things simple. I mainly use these tools:</p> <ul> <li>Markdown for notes and documentation  </li> <li>Diagrams or screenshots instead of long explanations  </li> <li>Version control (Git) to keep communication transparent  </li> </ul> <p>When needed, I can adapt to Notion, Google Drive, Slack, Discord or even Word.</p> <p>Communication isn\u2019t just a skill\u2014it\u2019s a habit. It\u2019s one of the most important habits to keep in shape.</p>"},{"location":"How-I-Work/practical/emotional_awareness/","title":"Emotional Awareness","text":"<p>Emotional awareness is a skill I try to bring into everything I do\u2014whether I\u2019m working with students, collaborating with a team, or just managing my own energy throughout the day.</p> <p>It\u2019s about noticing how people feel, not just what they say or do. And it\u2019s about being honest with myself when I\u2019m stressed, tired, frustrated, or off balance.</p>"},{"location":"How-I-Work/practical/emotional_awareness/#reading-the-room","title":"Reading the Room","text":"<p>I try to stay tuned into the emotional tone of the space I\u2019m in:</p> <ul> <li>Are people feeling motivated, or overwhelmed?  </li> <li>Is someone unusually quiet or defensive?  </li> <li>Does the energy feel focused or scattered?</li> </ul> <p>Even small changes in tone, posture, or engagement can say a lot. Being aware of those things helps me respond more thoughtfully, adjust my approach, or simply ask if someone\u2019s okay.</p>"},{"location":"How-I-Work/practical/emotional_awareness/#internal-awareness","title":"Internal Awareness","text":"<p>It\u2019s just as important to pay attention to my own emotional state. If I\u2019m not focused, impatient, or tired, it affects how I work\u2014and how I treat the people around me.</p> <p>Sometimes I\u2019ll pause before reacting, take a break, or shift to a task that fits my current headspace better. I\u2019ve learned that managing my energy is often more important than managing my time.</p>"},{"location":"How-I-Work/practical/emotional_awareness/#why-it-matters","title":"Why It Matters","text":"<p>Emotional awareness helps me:</p> <ul> <li>Support people better\u2014especially when they\u2019re struggling but not saying it  </li> <li>Avoid unnecessary conflict by noticing tension early  </li> <li>Create environments where people feel heard, respected, and safe to speak up</li> </ul> <p>It doesn\u2019t mean being overly sensitive or trying to fix everyone\u2019s mood. It just means being aware, empathetic, and willing to adjust when needed.</p> <p>At the end of the day, people remember how you made them feel\u2014just as much as what you said or built together.</p>"},{"location":"How-I-Work/practical/situational_awareness/","title":"Situational Awareness","text":"<p>I learned most about situational awareness while volunteering with a SAR (Search and Rescue) team. Since then, I\u2019ve adapted that skill into my everyday life. It\u2019s about paying attention\u2014not just to the task in front of me, but to the context, the people around me, and the systems I\u2019m working within.</p> <p>I think of it as \u201cnoticing things before they become problems.\u201d Whether I\u2019m setting up a workshop, debugging a machine, or helping someone in the lab, I try to stay alert to what\u2019s going on\u2014even if no one\u2019s said anything yet.</p> <p>There are a few practical things I do when I really need to focus. Sometimes I wear my watch on the right hand. More often, I wear my ring on my index finger\u2014it\u2019s a small physical reminder to be present and pay attention to my surroundings.</p>"},{"location":"How-I-Work/practical/situational_awareness/#what-i-look-for","title":"What I Look For","text":"<p>Situational awareness shows up in small moments:</p> <ul> <li>Is the equipment behaving differently than usual?  </li> <li>Is someone struggling but not saying anything?  </li> <li>Does the plan still make sense based on how things have shifted?  </li> <li>Are people engaged, or just going through the motions?  </li> </ul> <p>These details might not be on a checklist, but they often matter more than what's written down.</p>"},{"location":"How-I-Work/practical/situational_awareness/#tools-that-help-me-stay-aware","title":"Tools That Help Me Stay Aware","text":"<ul> <li>Check-ins \u2014 I ask people how things are going, and I actually listen  </li> <li>Body language and tone \u2014 especially in teaching or group work  </li> <li>Environmental cues \u2014 sounds, smells, lights, airflow, layout  </li> <li>Notes and sketches \u2014 to capture what I\u2019m seeing before I forget  </li> <li>Stepping back \u2014 a minute of pause often gives me better perspective than charging forward</li> </ul>"},{"location":"How-I-Work/practical/situational_awareness/#why-it-matters","title":"Why It Matters","text":"<p>A lot of problems can be avoided just by noticing sooner. And sometimes, even small actions\u2014like rearranging a table, changing how something\u2019s explained, or making space for someone to speak\u2014can shift things in a better direction.</p> <p>Situational awareness isn\u2019t about being perfect. It\u2019s about being present.</p>"},{"location":"How-I-Work/systematic/","title":"\ud83e\udde9 Systematic Thinking","text":"<p>Systematic thinking helps me see the bigger picture while still keeping track of the details. It\u2019s how I organize my work, build ideas over time, and make sure nothing important gets lost in the chaos.</p> <p>This mindset shows up in how I approach projects, solve complex problems, and document things as I go.</p> <p>This section includes:</p> <ul> <li> <p>Innovation   How I think about meaningful innovation\u2014beyond the buzzwords\u2014and look for ideas that actually create value.</p> </li> <li> <p>Layered Thinking   A way of breaking things down into layers, stages, or systems so they\u2019re easier to understand and work with.</p> </li> <li> <p>Spiral Development   Building things iteratively, learning with each loop, and refining as I go.</p> </li> <li> <p>Time &amp; Supply Management   How I manage resources, deadlines, and attention across projects\u2014especially when there\u2019s a lot happening at once.</p> </li> <li> <p>Documenting on the Go   My approach to writing things down as I work, keeping notes useful and clear using Markdown and simple structure.</p> </li> </ul>"},{"location":"How-I-Work/systematic/documenting_on_the_go/","title":"Documenting on the Go","text":"<p>I don\u2019t wait until the end of a project to write things down, I document as I go, and sometimes even before I go. That means capturing ideas, progress, and challenges while I\u2019m in the middle of doing the work, not just after it\u2019s finished.</p> <p>It\u2019s not always polished, but it\u2019s real. And that makes it more useful \u2014 both for myself and for others who might read or build on it later.</p>"},{"location":"How-I-Work/systematic/documenting_on_the_go/#my-documentation-triangle","title":"My Documentation Triangle","text":"<p>I rely on a simple system made up of three tools:</p> <ul> <li> <p>Notebook \u2013 for quick, temporary notes   I jot things down fast during work sessions, meetings, or experiments. These notes aren\u2019t meant to last forever \u2014 just to hold details until I process or transfer them.</p> </li> <li> <p>Markdown \u2013 for fast and structured documentation   Markdown is my go-to format. I can write quickly, use headings and bullet points, and revisit or improve it later. I usually have my laptop nearby, so this fits into my flow naturally.</p> </li> <li> <p>Photos \u2013 to capture context and details   I try to be smart about what I take pictures of, useful angles, key steps, or parts I\u2019ll want to reference later. If I don\u2019t have time to explain something fully, I often mark it in the photo with a note or post-it so I can write about it later.</p> </li> </ul>"},{"location":"How-I-Work/systematic/documenting_on_the_go/#why-i-document-early","title":"Why I Document Early","text":"<ul> <li>I forget things fast, this helps me keep track of insights before they fade  </li> <li>It\u2019s easier to write about something while I\u2019m still in it  </li> <li>It makes debugging, sharing, and teaching smoother  </li> <li>It saves time later when I want to turn the work into a report, website, or tutorial  </li> </ul>"},{"location":"How-I-Work/systematic/documenting_on_the_go/#its-not-about-being-perfect","title":"It\u2019s Not About Being Perfect","text":"<p>I don\u2019t try to make everything beautiful right away. My focus is on:</p> <ul> <li>Clarity over polish  </li> <li>Momentum over formatting  </li> <li>Truth over structure (at least at first)</li> </ul> <p>Good documentation doesn\u2019t slow me down, it helps me move forward with more awareness and less guesswork.</p>"},{"location":"How-I-Work/systematic/documenting_on_the_go/#bonus-markdown-wins","title":"Bonus: Markdown Wins","text":"<p>Markdown hits the sweet spot between raw notes and finished content. It\u2019s:</p> <ul> <li>Fast to write  </li> <li>Easy to format  </li> <li>Version-control friendly  </li> <li>Works well for both personal notes and public sharing</li> </ul> <p>Whether it ends up in a Git repo, a website, or a PDF. Markdown helps me stay organized without getting stuck in formatting tools.</p>"},{"location":"How-I-Work/systematic/documenting_on_the_go/#final-thought","title":"Final Thought","text":"<p>I document everything from workshops, talks, what I\u2019m learning, projects, and even random stuff. Others can benefit from my documentation but It\u2019s mainly for myself.</p> <p>Good documentation is a gift for your future self.</p>"},{"location":"How-I-Work/systematic/innovation/","title":"Innovation","text":"<p>Innovation is often presented as a polished, structured process \u2014 but I\u2019ve noticed that in reality, it\u2019s usually messy, unpredictable, and full of contradictions.</p> <p>Sometimes it\u2019s resourceful. Sometimes it\u2019s wasteful. Sometimes it\u2019s a burst of energy with no clear result. But all of it is part of the process.</p> <p>I\u2019ve come to see innovation not as a straight line, but more like a spiral \u2014 looping through trial, failure, learning, and rethinking. Even when it looks chaotic, there are still patterns worth noticing.</p> <p>After reading and listening to others who work with innovation, I\u2019ve found that most people agree on one thing: there is a right answer to what innovation is. It\u2019s not just something you can make up.</p> <p>I find it helpful to break it down into a simple formula:</p> <p>Innovation = Value \u00d7 Idea</p> <p>An idea without value is noise. Value without a new idea is just repetition. But when the two meet \u2014 that\u2019s where real innovation can happen.</p> <p>There\u2019s nothing wrong with an idea on its own. And there\u2019s nothing wrong with pursuing value \u2014 that\u2019s called business. But to truly call something innovation, those two must come together.</p>"},{"location":"How-I-Work/systematic/innovation/#what-i-look-for","title":"What I Look For","text":"<ul> <li>Friction or frustration \u2014 where people are stuck  </li> <li>Signals \u2014 things people already do that could be made better  </li> <li>Ideas that can be prototyped, tested, and shared  </li> </ul> <p>Innovation doesn\u2019t have to be clean. But it does need to be honest \u2014 grounded in real needs, not just hype or trends.</p> <p>Especially in education and community work, innovation has to be human, useful, and shareable \u2014 even if it starts out as a mess.</p>"},{"location":"How-I-Work/systematic/innovation/#notable-mentions","title":"Notable Mentions","text":"<p>People who\u2019ve influenced how I think about innovation through their work and writing:</p> <ul> <li>John Besat </li> <li>Emilio Bellini, PhD</li> </ul>"},{"location":"How-I-Work/systematic/layered_thinking/","title":"Layered Thinking","text":"<p>When things get complicated, I don\u2019t try to hold it all in my head at once, I break it into layers.</p> <p>This mindset helps me make sense of complex systems, especially in projects that involve electronics, code, documentation, or multiple people working together. It\u2019s a way of organizing work so that I can stay focused without losing sight of the big picture.</p> <p>I don\u2019t mean layers in a strict engineering way (like OSI models or tech stacks), but more like mental layers, zoom levels, perspectives, and stages of thinking.</p>"},{"location":"How-I-Work/systematic/layered_thinking/#how-i-use-it","title":"How I Use It","text":"<ul> <li>In electronics, I might separate power, logic, and mechanical systems  </li> <li>In code, I think about structure, flow, and interaction layers  </li> <li>In teaching, I often separate the concept from the tool from the outcome  </li> <li>In planning, I break things into now / next / later  </li> <li>In writing, I think about outline \u2192 draft \u2192 refine  </li> </ul> <p>Layered thinking helps me avoid feeling stuck or overwhelmed. If something isn\u2019t working, I ask:  </p> <p>\u201cWhat layer is this problem really in?\u201d</p>"},{"location":"How-I-Work/systematic/layered_thinking/#why-it-matters","title":"Why It Matters","text":"<p>Projects rarely fail because of one thing, it\u2019s often multiple small things interacting. By breaking things into layers, I can trace problems back more clearly and make better decisions about what to change (and when).</p> <p>It also helps me explain my thinking to others. When I can show someone what layer a decision lives in, it\u2019s easier to get aligned \u2014 even if we see things differently.</p>"},{"location":"How-I-Work/systematic/layered_thinking/#example","title":"Example","text":"<p>In a learning environment, I might think about:</p> <ul> <li>Layer 1: The student's mindset and confidence  </li> <li>Layer 2: The tools and process they\u2019re learning  </li> <li>Layer 3: The final output or goal  </li> </ul> <p>If something isn\u2019t working, I don\u2019t just focus on the output, I trace it back through the layers to find where the real issue might be.</p> <p>Layered thinking isn\u2019t a formula it\u2019s a flexible mental model. It helps me stay organized, move forward, and make complexity feel a little more manageable.</p>"},{"location":"How-I-Work/systematic/spiral_development/","title":"Spiral Development","text":"<p>My work rarely follows a straight line. Instead, I often return to the same project or idea multiple times each time adding a new layer, fixing something, or refining the concept.</p> <p>That\u2019s why I relate more to spiral development than linear planning.</p> <p>I was introduced to this mindset during Fab Academy, and I\u2019ve used it ever since, especially in rapid prototyping and time-constrained projects.</p>"},{"location":"How-I-Work/systematic/spiral_development/#what-it-looks-like","title":"What It Looks Like","text":"<p>Spiral development is a process of:</p> <ul> <li>Revisiting things with a fresh perspective  </li> <li>Learning through repetition and iteration  </li> <li>Gradually improving outcomes without restarting from scratch  </li> <li>Moving forward with what\u2019s possible now, not waiting for perfect conditions  </li> </ul> <p>Instead of doing everything at once, I work in cycles small improvements, lessons learned, and momentum.</p>"},{"location":"How-I-Work/systematic/spiral_development/#why-it-works-for-me","title":"Why It Works for Me","text":"<ul> <li>It reduces pressure to get things right the first time  </li> <li>It makes experimentation safer, I can try, fail, and improve  </li> <li>It helps me use feedback as fuel instead of frustration  </li> <li>It fits the realities of teaching, prototyping, and working with limited time or resources</li> </ul> <p>I don\u2019t always know where a project will end up, and that\u2019s okay. Spiral development lets ideas grow naturally, without needing everything to be perfect from the beginning.</p>"},{"location":"How-I-Work/systematic/spiral_development/#when-it-shows-up","title":"When It Shows Up","text":"<p>I use this approach in a lot of places:</p> <ul> <li>Electronics - rough circuits first, refine layout later  </li> <li>Code - quick working prototype, then structure it better  </li> <li>Writing - outline, messy draft, polish  </li> <li>Workshops - try a version, gather feedback, improve next time  </li> </ul> <p>Each loop teaches me something new and that\u2019s what makes the spiral stronger.</p>"},{"location":"How-I-Work/systematic/time_supply_management/","title":"Time &amp; Supply Management","text":"<p>Most of my work happens under real world limits, not ideal conditions. I\u2019m often working with limited time, limited tools, or limited budget (and sometimes all three). So I\u2019ve learned to be flexible and practical with what I have.</p> <p>My mindset I often return to is:</p> <p>Fast, good, cheap - pick two.</p> <p>If I want something done quickly and well, it probably won\u2019t be cheap. If I want it cheap and fast, it might not be good. If I want it good and cheap, it will take time.</p> <p>Knowing this helps me set realistic expectations \u2014 for myself and others.</p>"},{"location":"How-I-Work/systematic/time_supply_management/#what-i-focus-on","title":"What I Focus On","text":"<p>Instead of chasing perfection, I try to:</p> <ul> <li>Make small, meaningful progress  </li> <li>Use what I already have before sourcing more  </li> <li>Reuse or repurpose materials creatively  </li> <li>Prioritize tasks that unblock others or clarify the path forward  </li> </ul>"},{"location":"How-I-Work/systematic/time_supply_management/#managing-time","title":"Managing Time","text":"<p>Time isn\u2019t just about hours, it\u2019s about energy, focus, and momentum. I manage time by:</p> <ul> <li>Chunking - big tasks into small, doable pieces  </li> <li>Starting messy - when I don\u2019t know where to begin  </li> <li>Looping back - to improve, rather than delaying to plan perfectly  </li> <li>Blocking time - for focused work and protecting that space when I can</li> </ul> <p>I also try to be honest with myself about when I\u2019m actually productive, and not waste focus on things that don\u2019t move the project forward.</p>"},{"location":"How-I-Work/systematic/time_supply_management/#managing-supplies","title":"Managing Supplies","text":"<p>Especially in prototyping and lab work, supplies matter but I don\u2019t always have access to everything I\u2019d like.</p> <p>Here\u2019s how I approach it:</p> <ul> <li>Inventory first - I check what\u2019s already available  </li> <li>Hack creatively - using parts or materials in unconventional ways  </li> <li>Plan around constraints - letting the available tools shape the design  </li> <li>Share and ask - if I can borrow or trade, I do  </li> </ul> <p>Constraints aren\u2019t a problem, they\u2019re a creative tool. If I can\u2019t afford to waste time or materials, I make that part of the design process.</p>"},{"location":"How-I-Work/systematic/time_supply_management/#why-it-matters","title":"Why It Matters","text":"<p>Time and supply management isn\u2019t just about being efficient, it\u2019s about making progress in the real world.</p> <p>Being resourceful, honest about tradeoffs, and willing to adapt helps me keep momentum, reduce stress, and focus on what actually matters.</p>"},{"location":"How-I-Work/technical/","title":"Techncal","text":"<p>This section is a curated overview of the tools, systems, and platforms I use in my day-to-day work. From writing code and debugging electronics to documenting projects and designing for fabrication.</p> <p>It\u2019s not meant to be exhaustive or permanent. Tools come and go. What matters is how they fit into a flow and that flow is always evolving.</p>"},{"location":"How-I-Work/technical/#sections","title":"Sections","text":"<ul> <li> <p>Electronics \u26a1   Logic analyzers, oscilloscopes, soldering tools, and other lab essentials.</p> </li> <li> <p>Operating System \ud83d\udcbb   My Linux Mint setup, terminal preferences, and shell customizations.</p> </li> <li> <p>Editors \u270d\ufe0f   The environments I use to write code and documents - from Neovim to VS Code.</p> </li> <li> <p>Languages &amp; Tools   Programming languages and related tools I use regularly: Python, C, Lua, Markdown, and more.</p> </li> <li> <p>Platforms   Arduino, Raspberry Pi, RP2040, ESP32, and other boards and ecosystems I develop for.</p> </li> <li> <p>Design Tools \ud83c\udfa8   CAD, vector design, video editing, and other tools I use in the design process.</p> </li> </ul>"},{"location":"How-I-Work/technical/Electronics/","title":"Electronics","text":"<p>This section covers the core electronics tools I use when building, debugging, or teaching \u2014 from soldering irons and multimeters to oscilloscopes and logic analyzers.</p> <p>These aren\u2019t tied to specific brands or models. Instead, they reflect how I work with each type of tool in real-world scenarios \u2014 what they\u2019re for, how I use them, and practical tips from daily use.</p>"},{"location":"How-I-Work/technical/Electronics/#soldering","title":"\u2192 Soldering","text":"<p>The foundation of hands-on electronics work. Through-hole, SMD, fixes, and best practices.</p>"},{"location":"How-I-Work/technical/Electronics/#multimeter","title":"\u2192 Multimeter","text":"<p>Quick checks, continuity tests, and reading the basics \u2014 still one of the most powerful tools.</p>"},{"location":"How-I-Work/technical/Electronics/#oscilloscope","title":"\u2192 Oscilloscope","text":"<p>Understanding what's happening in a circuit over time. Analog, digital, and mobile scopes.</p>"},{"location":"How-I-Work/technical/Electronics/#logic-analyzer","title":"\u2192 Logic Analyzer","text":"<p>Looking into digital signals and protocols \u2014 I\u00b2C, SPI, UART, and more.</p> <p>More tools may be added here as needed.</p>"},{"location":"How-I-Work/technical/Electronics/kicad/","title":"KiCad","text":"<p>KiCad is my go-to for PCB design and electronic schematics. I like how it gives me full control over the layout, and how customizable it is.</p> <p>I use it for: - Schematic capture and BOM generation - PCB layout (1-4 layers) - Gerber exports for fab - 3D previews for fit checks</p> <p>I keep my libraries organized in subfolders to avoid clutter, and I store them in my home directory.</p>"},{"location":"How-I-Work/technical/Electronics/logic-analyzer/","title":"Logic Analyzer","text":"<p>A logic analyzer is one of those tools you don\u2019t always need, until you really need it. It\u2019s perfect for visualizing and debugging digital communication protocols like I\u00b2C, SPI, UART, and more.</p>"},{"location":"How-I-Work/technical/Electronics/logic-analyzer/#what-its-for","title":"What it\u2019s for","text":"<ul> <li>Debugging serial protocols</li> <li>Seeing the actual data on digital lines</li> <li>Finding timing issues or unexpected noise</li> <li>Reverse engineering or tapping into unknown devices</li> </ul>"},{"location":"How-I-Work/technical/Electronics/logic-analyzer/#how-i-use-it","title":"How I use it","text":"<ul> <li>Verifying that I\u00b2C devices are responding properly</li> <li>Checking baud rates and data flow on UART</li> <li>Confirming SPI timing between a microcontroller and a peripheral</li> <li>Triggering capture on a specific condition to catch rare events</li> </ul>"},{"location":"How-I-Work/technical/Electronics/logic-analyzer/#types","title":"Types","text":"<ul> <li>USB analyzers \u2013 Small, affordable, and powered by software like PulseView or DSView. Great for most hobbyist work.</li> <li>Standalone analyzers \u2013 More advanced models exist, but I don\u2019t use them often.</li> </ul>"},{"location":"How-I-Work/technical/Electronics/logic-analyzer/#tips-usage-notes","title":"Tips &amp; Usage Notes","text":"<ul> <li>Keep wire lengths short \u2014 long flying leads can introduce noise</li> <li>Label channels clearly in software to avoid confusion</li> <li>Triggering is your best friend: set it carefully</li> <li>Sample rate matters \u2014 make sure it\u2019s at least 4\u20135\u00d7 your expected signal frequency</li> <li>It\u2019s okay to start with an 8-channel analyzer \u2014 you rarely need more right away</li> </ul>"},{"location":"How-I-Work/technical/Electronics/logic-analyzer/#software","title":"Software","text":"<ul> <li>DSView \u2013 the one I use</li> <li>PulseView (Sigrok) \u2013 open source, widely supported</li> </ul>"},{"location":"How-I-Work/technical/Electronics/multimeter/","title":"Multimeter","text":"<p>The multimeter is one of the most essential tools on the bench. It\u2019s not fancy, it does\u2019t blink, but it answers important questions fast.</p> <p>It\u2019s usually the first or second tool I grab when debugging, especially for power, continuity, or basic readings.</p>"},{"location":"How-I-Work/technical/Electronics/multimeter/#what-its-for","title":"What it\u2019s for","text":"<ul> <li>Checking if something has power</li> <li>Measuring voltage, resistance, and current</li> <li>Continuity and diode tests</li> <li>Quick sanity checks on sensors, power rails, or broken traces</li> </ul>"},{"location":"How-I-Work/technical/Electronics/multimeter/#modes-i-use-the-most","title":"Modes I use the most","text":"<ul> <li>Voltage (DC) \u2013 for checking micro controllers, sensors, or power rails</li> <li>Continuity \u2013 for testing traces, jumpers, or verifying solder joints</li> <li>Resistance \u2013 for checking resistors or passive components</li> <li>Current (less often) \u2013 used with care, since it requires breaking the circuit</li> </ul>"},{"location":"How-I-Work/technical/Electronics/multimeter/#tips-usage-notes","title":"Tips &amp; Usage Notes","text":"<ul> <li>Always start with voltage mode before poking around</li> <li>Continuity mode with audio beep is a time saver</li> <li>Use clips or third hands when probing awkward spots</li> <li>Cheap multimeters can be fine \u2014 but a stable reading matters more than the brand</li> </ul>"},{"location":"How-I-Work/technical/Electronics/multimeter/#safety-notes","title":"Safety Notes","text":"<ul> <li>Be cautious when measuring current, especially in unknown circuits</li> <li>Don\u2019t switch modes while probing live connections</li> <li>Always check your probe placement and lead configuration before powering up</li> </ul>"},{"location":"How-I-Work/technical/Electronics/oscilloscope/","title":"Oscilloscope","text":"<p>This is by far my hammer. The oscilloscope, basically just a multimeter with time \u2014 is the first thing I reach for when I need to understand something.</p> <p>I don\u2019t care much about what type it is, as long as it works. That said, we can divide them into three types: analog, digital, and mobile.</p>"},{"location":"How-I-Work/technical/Electronics/oscilloscope/#analog","title":"Analog","text":"<p>The classic one \u2014 and the type I was trained on in school. There's something about being connected to the source, to the tube, and understanding how the scope itself works that makes it really satisfying to use.</p> <p>No auto set to save you, so being comfortable with all the knobs is essential. But there are fewer settings overall, so it\u2019s easier than it seems.</p>"},{"location":"How-I-Work/technical/Electronics/oscilloscope/#digital","title":"Digital","text":"<p>Everything an analog scope does, plus some nice extras like auto set. I always recommend understanding the basics first instead of relying too much on auto set.</p> <p>Most digital scopes include useful features like: - On-screen measurements - Cursors - Protocol decoding (on the fancier models)</p>"},{"location":"How-I-Work/technical/Electronics/oscilloscope/#mobile","title":"Mobile","text":"<p>There are plenty of mobile scopes out there, standalone handheld units or USB-connected models.</p> <p>I use the DSView scope. It has a nice UI and decent specs. Mobile scopes won\u2019t replace a good analog or digital bench scope, but they\u2019re great on the go. Plus, they make it easy to take screenshots or share signals.</p>"},{"location":"How-I-Work/technical/Electronics/oscilloscope/#specs-to-keep-in-mind","title":"Specs to Keep in Mind","text":"<ul> <li>Bandwidth (MHz)</li> <li>Sample rate (MSa/s)</li> <li>Number of channels</li> <li>Input range / probe type</li> <li>Trigger options</li> </ul>"},{"location":"How-I-Work/technical/Electronics/oscilloscope/#terms-usage-tips","title":"Terms &amp; Usage Tips","text":"<ul> <li>Learn to use triggering - it's key to clean signals</li> <li>Always ground your probe properly</li> <li>Keep one channel free if you can</li> <li>Don\u2019t chase every setting - start simple</li> </ul>"},{"location":"How-I-Work/technical/Electronics/soldering/","title":"Soldering","text":"<p>Soldering is core to almost everything I build \u2014 from fixing broken connections to assembling full prototypes. It\u2019s a skill that rewards practice, patience, and the right mindset (and tip temperature).</p>"},{"location":"How-I-Work/technical/Electronics/soldering/#what-its-for","title":"What it\u2019s for","text":"<ul> <li>Making electrical connections between components and boards</li> <li>Repairing broken joints or wires</li> <li>Assembling circuits on perfboard, stripboard, or custom PCBs</li> <li>Modifying or hacking existing hardware</li> <li>Making or fixing cablels</li> </ul>"},{"location":"How-I-Work/technical/Electronics/soldering/#how-i-approach-it","title":"How I approach it","text":"<ul> <li>I keep a few different tips on hand \u2014 chisel, conical, and fine-point</li> <li>350\u2013380\u00b0C is my general temp range, lower for tiny SMD parts</li> <li>I try to use flux often \u2014 it\u2019s a cheat code for clean soldering</li> <li>I solder components from lowest to highest profile (resistors \u2192 headers)</li> </ul>"},{"location":"How-I-Work/technical/Electronics/soldering/#tools-i-keep-nearby","title":"Tools I keep nearby","text":"<ul> <li>Soldering iron with adjustable temperature</li> <li>Flux pen or paste</li> <li>Desoldering pump or braid</li> <li>Helping hands or PCB holders</li> <li>Isopropyl alcohol + brush for cleanup</li> </ul>"},{"location":"How-I-Work/technical/Electronics/soldering/#tips-notes","title":"Tips &amp; Notes","text":"<ul> <li>Keep your tip clean \u2014 wipe and re-tin regularly</li> <li>Don\u2019t overheat pads, especially on cheap PCBs</li> <li>If it\u2019s not flowing well, back off and apply flux</li> <li>Desoldering is a skill of its own \u2014 go slow</li> <li>A microscope or magnifier really helps for SMD work</li> </ul>"},{"location":"How-I-Work/technical/Electronics/soldering/#for-teaching","title":"For Teaching","text":"<ul> <li>Start with through-hole, then move to SMD when students are comfortable</li> <li>Show how to fix a cold joint \u2014 don\u2019t just explain it</li> <li>Let people fail safely \u2014 most mistakes are recoverable</li> </ul>"},{"location":"How-I-Work/technical/OS/","title":"Operating System","text":""},{"location":"How-I-Work/technical/OS/#linux-mint","title":"Linux Mint \ud83d\udc27","text":"<p>This is my daily driver. It\u2019s lightweight, stable, and works great for development, especially for embedded work. I use the Cinnamon desktop because it stays out of the way and feels familiar.</p> <p>Below are the tools, languages, and platforms I use regularly within this environment.</p>"},{"location":"How-I-Work/technical/OS/#terminal-tools","title":"Terminal tools","text":"<p>Zsh, fzf, glow, batcat, and more tools that make the terminal a productive space.</p>"},{"location":"How-I-Work/technical/OS/#programming-languages-tooling","title":"Programming Languages &amp; Tooling","text":"<p>Python, C, Lua, Git, Markdown are languages I work with across platforms.</p> <p>Python,   C,   R,   Lua,   Markdown,   Git, </p> <p>Learning syntax quickly?</p> <p>learnxinyminutes.com \u2013 fast, practical syntax overviews for many programming languages.</p>"},{"location":"How-I-Work/technical/OS/#editors","title":"Editors","text":"<p>Neovim is my daily editor. I also use VS Code and Typora depending on the task.</p> <p>Neovim,   VS Code,   Typora</p>"},{"location":"How-I-Work/technical/OS/#embedded-platforms","title":"Embedded Platforms","text":"<p>Boards and ecosystems I work with regularly.</p> <p>PlatformIO,   Arduino,   MicroPython,   Raspberry Pi,   ESP32,   RP2040,   CircuitPython</p>"},{"location":"How-I-Work/technical/OS/#windows","title":"Windows \ud83e\ude9f","text":"<p>I occasionally use Windows for tools like VCarve or when working with students and clients tied to Windows-only software. I don\u2019t use dual boot, virtualization is enough when needed, but Linux is where I live.</p>"},{"location":"How-I-Work/technical/OS/terminal/","title":"Terminal","text":"<p>The terminal is where I feel most at home. I prefer tools that are fast, keyboard-driven, and easy to customize.</p>"},{"location":"How-I-Work/technical/OS/terminal/#kitty","title":"Kitty","text":"<p>My terminal emulator of choice is Kitty . Yes, the name and cat icon won me over, but it's also genuinely fast, GPU-accelerated, and super customizable.</p> <p>It works great with Neovim and supports features like:</p> <ul> <li>Tabbed layouts</li> <li>Graphics in the terminal</li> <li>Configurable keybindings</li> <li>Fast startup and rendering</li> </ul>"},{"location":"How-I-Work/technical/OS/terminal/#kitty-keybindings","title":"Kitty Keybindings","text":"Shortcut Action <code>kitty_mod + e</code> Open new split window <code>kitty_mod + t</code> Open new tab <code>kitty_mod + n</code> Open new tab (same dir) <code>kitty_mod + w</code> close tab/window <code>kitty_mod + enter</code> pen new split window <code>kitty_mod + f2</code> open kitty config <code>kitty_mod + f5</code> reload kitty config <p>(kitty_mod <code>Ctrl + Shift</code>)</p>"},{"location":"How-I-Work/technical/OS/terminal/#config","title":"config","text":"<p>I don\u2019t customize Kitty much. I use the MesloLGM Nerd Font to support icons, hide the border, and enable transparency. I also use a custom theme.</p> <p>My kitty config can be found here</p>"},{"location":"How-I-Work/technical/OS/terminal/#appearance","title":"Appearance","text":"<ul> <li>Font: <code>MesloLGM Nerd Font</code></li> <li>Opacity: <code>background_opacity 0.9</code></li> <li>Logo: Custom transparent logo: <code>/path/to/logo.png</code></li> <li>Window Decorations: Disabled (<code>hide_window_decorations 1</code>)</li> </ul>"},{"location":"How-I-Work/technical/OS/terminal/#navigation-layout-cinnamon","title":"Navigation &amp; Layout (Cinnamon)","text":"Shortcut Action <code>Super + \u2190/\u2192/\u2191/\u2193</code> Tile window to side or corner <code>Super + Down</code> Unmaximize / Restore tiled window <code>Alt + F8</code> Resize window with arrow keys <code>Alt + Space</code> Window menu (move, resize, etc.) <p>I use <code>nvim</code> as my default terminal editor. You can check out my full Neovim setup here.</p>"},{"location":"How-I-Work/technical/OS/terminal/#starship","title":"Starship","text":"<p>I use Starship to make my prompt clean, informative, and cat-friendly.</p> <p>It gives me:</p> <ul> <li>Git integration</li> <li>Current directory, language versions, etc.</li> <li>A beautiful, minimal style</li> </ul> <p>And of course it includes a cat icon.</p> <p>Find my starship.toml config here</p>"},{"location":"How-I-Work/technical/OS/terminal/#zsh","title":"Zsh","text":"<p>I use Zsh because it\u2019s highly configurable and offers smart completion, syntax highlighting, and autosuggestions. It's a joy to use once it\u2019s tuned right.</p>"},{"location":"How-I-Work/technical/OS/terminal/#config_1","title":"Config","text":"<p>Find my .zshrc config here</p>"},{"location":"How-I-Work/technical/OS/terminal/#keybinds","title":"keybinds","text":"<ul> <li>Fuzzy finder-fzf <code>ctrl+r</code>: search history <code>ctrl+t</code>: search files <code>alt+c</code>: search directories</li> <li>In fzf I use <code>ctrl+j and k</code> to navigate up and down and <code>ctrl+l</code> to accept a line.</li> <li>In fzf-tab I do the same use <code>ctrl+j and k</code> to navigate up and down and <code>ctrl+l</code> to accept a line.</li> <li>For auto suggestion I use <code>ctrl+l</code> to accept.</li> <li><code>ctrl+j</code> or <code>ctrl+m</code>: accept-line (like pressing Enter)</li> <li><code>ctrl+g</code>: clear screen</li> </ul>"},{"location":"How-I-Work/technical/OS/terminal/#aliases","title":"Aliases","text":"<ul> <li><code>lg</code>: open lazygit</li> <li><code>multipull</code>: git pull from multiple directories</li> <li><code>terminaldoom</code>: play Doom in the terminal, why? because every terminal needs Doom.</li> </ul>"},{"location":"How-I-Work/technical/OS/terminal/#terminal-tools","title":"Terminal Tools","text":"<p>These are some of the tools I use regularly in the terminal:</p> <ul> <li><code>git</code> : for version control and collaborating across projects</li> <li><code>glow</code> : to preview Markdown directly in the terminal</li> <li><code>fzf</code> : fuzzy finder for quick file and history navigation</li> <li><code>batcat</code> : a better <code>cat</code> with syntax highlighting and line numbers</li> <li><code>lazygit</code> : a TUI for Git that\u2019s simple and powerful</li> <li>Yazi \u2014 Terminal file manager with fast navigation and image previews.</li> <li>hollywood - to look like a hacker</li> </ul> <p>These tools help me move fast, automate tasks, and stay in flow.</p> <p>Command got you confused?</p> <p>Paste it into explainshell.com to see what each part does.</p>"},{"location":"How-I-Work/technical/OS/editors/brackets/","title":"Brackets (legacy)","text":"<p>Brackets was the first editor I seriously used when learning HTML and CSS. It had a clean interface, a live preview feature, and just enough power to feel capable without being overwhelming.</p> <p>I still have a soft spot for it, it\u2019s where I really started to enjoy writing code.</p>"},{"location":"How-I-Work/technical/OS/editors/brackets/#why-it-mattered","title":"Why it mattered","text":"<ul> <li>Helped me learn HTML/CSS in a friendly environment</li> <li>Live preview made it feel rewarding and immediate</li> <li>Taught me editor basics before I moved on to more advanced tools</li> </ul>"},{"location":"How-I-Work/technical/OS/editors/brackets/#throwback","title":"Throwback","text":"<p>I actually used Brackets during my Fab Academy 2015. It was my first time building and documenting on the web, and Brackets made it approachable and fun.</p>"},{"location":"How-I-Work/technical/OS/editors/brackets/#status","title":"Status","text":"<p>Brackets is no longer actively maintained, and I don\u2019t use it anymore. But it played an important role in getting me started, and for that it deserves a small space here.</p> <p>Some tools come and go but they shape how we work.</p> <p></p>"},{"location":"How-I-Work/technical/OS/editors/nvim/","title":"Neovim (I use Neovim btw)","text":"<p>I mainly started using Neovim because I wanted to look like a cool hacker.(Don\u2019t worry, I\u2019m not much of a danger)</p> <p>After getting over how cool it looked and spending days configuring it, I discovered that it\u2019s actually a really nice workflow.</p> <p></p>"},{"location":"How-I-Work/technical/OS/editors/nvim/#setup","title":"Setup","text":"<p>For anyone just starting out, I\u2019d recommend checking out kickstart nvim. It\u2019s a great minimal starter config.</p> <p>There\u2019s also this video  that I really wish I\u2019d found earlier.</p> <p>My Neovim setup has gone through a few iterations, but I\u2019ve restructured it for my needs mainly for embedded electronics and markdown. I now use my own custom setup, inspired by Kickstart and a few other configs I\u2019ve found along the way.</p>"},{"location":"How-I-Work/technical/OS/editors/nvim/#what-im-using","title":"What I\u2019m Using","text":"<ul> <li>\u2705 Neovim 0.11 (manually installed from official tarball)</li> <li>\u2705 Lazy as plugin manager</li> <li>\u2705 Modular Lua config under <code>~/.config/nvim/lua/hanndoddi</code></li> <li>\u2705 Custom dashboard with personal shortcuts</li> <li>\u2705 Treesitter, Mason, LSP, formatting, linting all working</li> <li>\u2705 Micropython and Platform.io</li> <li>\u2705 Transparent theme + icons</li> <li>\u2705 Lazy Git</li> </ul>"},{"location":"How-I-Work/technical/OS/editors/nvim/#structure","title":"Structure","text":"<p>I split things into modular Lua files for easier organization and customization.</p> <p>My config is split into:</p> <pre><code>~/.config/nvim/\n\u251c\u2500\u2500 init.lua\n\u251c\u2500\u2500 lua/\n\u2502   \u2514\u2500\u2500 hanndoddi/\n\u2502       \u251c\u2500\u2500 core/       -- Basic options, keymaps\n\u2502       \u251c\u2500\u2500 plugins/    -- Plugin configs\n\u2502       \u251c\u2500\u2500 lazy.lua    -- Lazy plugin setup\n\u2502       \u2514\u2500\u2500 init.lua    -- Main entry point\n</code></pre>"},{"location":"How-I-Work/technical/OS/editors/nvim/#notable-plugins","title":"Notable Plugins","text":"<ul> <li>lualine \u2013 statusline</li> <li>telescope \u2013 fuzzy finder</li> <li>nvim-tree \u2013 file explorer</li> <li>vim-visual-multi \u2013 multi-cursor</li> <li>todo-comments \u2013 highlight and search TODOs</li> <li>surround, substitute, comment \u2013 editing helpers</li> <li>formatter, linter, gitsigns</li> <li>leap - moving around fast</li> </ul>"},{"location":"How-I-Work/technical/OS/editors/nvim/#my-favorite-vim-motions-and-keybinds","title":"My favorite vim motions and keybinds","text":"<ul> <li>gcc - convert to comment and uncomment</li> <li>space+x - Check tasks</li> </ul>"},{"location":"How-I-Work/technical/OS/editors/nvim/#update-process","title":"Update Process","text":"<ul> <li>Manually update Neovim from GitHub releases:</li> </ul> <pre><code>curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz\nsudo rm -rf /opt/nvim\nsudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz\nsudo ln -sf /opt/nvim/bin/nvim /usr/local/bin/nvim\n</code></pre>"},{"location":"How-I-Work/technical/OS/editors/nvim/#thoughts","title":"Thoughts","text":"<p>You\u2019re more than welcome to explore (or fork) my Neovim config. But I highly recommend customizing it to suit your needs. I'm Still exploring deeper workflows like native multi-cursor editing, but happy with the current state.</p> <p>My take: - Don\u2019t force Neovim to act like VS Code. - If you\u2019re happy with your current editor \u2014 keep using it!</p> <p>Neovim is awesome if it works for you. Happens to work for me.</p> <p>Note</p> <p>My jouney to Nvim post</p> <p>Info</p> <p>My Dotfiles</p>"},{"location":"How-I-Work/technical/OS/editors/typora/","title":"Typora","text":"<p>Typora is a minimal Markdown editor with live preview. It\u2019s what I use when I want to focus purely on writing, especially when formatting is important.</p>"},{"location":"How-I-Work/technical/OS/editors/typora/#when-i-use-it","title":"When I use it","text":"<p>Sometimes opening Neovim or VS Code in a meeting can feel a bit much, not exactly low-key. That\u2019s where Typora comes in. I can open it quickly, access all my Markdown notes, and still look \u201cnormal.\u201d</p> <p>It has a nice default theme and some fun ones too, like Notebook or even Star Trek (though if I\u2019m using that one, I might as well open Neovim).</p> <p>I usually turn to Typora for:</p> <ul> <li>Writing Markdown-heavy documents with structure (e.g. proposals, teaching materials)</li> <li>Quickly previewing or exporting Markdown files</li> <li>Editing in a way that feels light but still powerful</li> <li></li> </ul>"},{"location":"How-I-Work/technical/OS/editors/typora/#what-i-like","title":"What I like","text":"<ul> <li>Clean, distraction-free interface</li> <li>Live preview while writing (no split panes)</li> <li>Good export options (PDF, HTML, etc.)</li> <li>Solid support for tables, math, and diagrams</li> <li>Custom themes - from simple to fun</li> </ul>"},{"location":"How-I-Work/technical/OS/editors/typora/#notes","title":"Notes","text":"<ul> <li>I don\u2019t use it for technical or versioned Markdown (Neovim or VS Code take over there)</li> <li>It\u2019s closed-source, but stable and fast</li> <li>Plays well with Git as long as I\u2019m not doing anything too complex</li> <li>Yes, this page about Typora was written in Typora</li> </ul>"},{"location":"How-I-Work/technical/OS/editors/vscode/","title":"Visual Studio Code","text":"<p>I used VS Code for a long time and still use it occasionally for specific tasks. It's a solid editor with a great extension ecosystem and excellent support for a wide range of languages and platforms.</p>"},{"location":"How-I-Work/technical/OS/editors/vscode/#why-i-used-it","title":"Why I used it","text":"<p>VS Code helped me get started with embedded programming, web development, and Markdown documentation. It\u2019s easy to set up and works out of the box for most workflows.</p> <p>Some features I appreciated: - Built-in Git integration - Markdown preview and export tools - PlatformIO support for embedded development - Great debugging interface</p>"},{"location":"How-I-Work/technical/OS/editors/vscode/#why-i-switched-mostly","title":"Why I switched (mostly)","text":"<p>Over time, I wanted more control and a setup that was faster and more terminal-oriented. That\u2019s what led me to Neovim.</p> <p>VS Code can still be useful for: - Projects that need GUI-based debugging - Working with others who use it - Quick editing or reviewing files</p>"},{"location":"How-I-Work/technical/OS/editors/vscode/#when-i-still-use-it","title":"When I still use it","text":"<p>I\u2019ll occasionally open VS Code when: - I need to export a nicely formatted PDF from Markdown - I'm on a system where my Neovim setup isn\u2019t installed</p> <p>It's a good tool and I wouldn\u2019t hesitate to recommend it to beginners or collaborators. I just found something that fits my workflow better.</p>"},{"location":"How-I-Work/technical/OS/languages/c/","title":"C","text":"<p>C is my go-to language for low-level embedded work \u2014 especially when performance and control matter.</p> <p>I don\u2019t use it for everything, but when I need direct access to hardware, memory management, or timing-sensitive logic, C gives me what I need.</p> <p>It\u2019s not always elegant, but it\u2019s solid. And once you learn to work with it, it becomes a powerful tool for building things that run close to the metal.</p> <p>I mainly use C in microcontroller projects and when working with PlatformIO or custom firmware.</p>"},{"location":"How-I-Work/technical/OS/languages/git/","title":"Git","text":"<p>A quick overview of how I use Git for version control, collaboration, and project management.</p>"},{"location":"How-I-Work/technical/OS/languages/git/#basics","title":"Basics","text":"<ul> <li><code>git init</code></li> <li><code>git add</code>, <code>git commit</code></li> <li><code>.gitignore</code></li> <li>Viewing history: <code>git log</code>, <code>git diff</code></li> </ul>"},{"location":"How-I-Work/technical/OS/languages/git/#everyday-workflow","title":"Everyday Workflow","text":"<ul> <li>Cloning repos</li> <li>Branching: <code>git checkout -b feature-name</code></li> <li>Merging and rebasing</li> <li>Resolving conflicts</li> <li>Pull/push with remotes</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/git/#useful-commands","title":"Useful Commands","text":"<pre><code>git status\ngit log --oneline --graph --all\ngit stash\ngit reset --soft HEAD~1\n</code></pre> <p>Pro Git Book</p>"},{"location":"How-I-Work/technical/OS/languages/html_css/","title":"HTML / CSS","text":"<p>I use HTML and CSS when I want to build something that lives on the web \u2014 like this site.</p> <p>I prefer using Markdown most of the time, but I\u2019m comfortable switching to HTML or CSS when I want more control over layout or styling.</p> <p>I also use CSS when customizing MkDocs Material, or when building simple pages for projects and courses.</p> <p>My focus is usually on clarity, speed, and function \u2014 not perfect pixel design.</p>"},{"location":"How-I-Work/technical/OS/languages/javascript/","title":"JavaScript","text":"<p>I\u2019m not actively focused on learning JavaScript, but I\u2019ve picked up the basics and can understand and modify scripts when needed.</p>"},{"location":"How-I-Work/technical/OS/languages/javascript/#what-i-use-it-for","title":"What I Use It For","text":"<ul> <li>Tweaking interactive behavior in templates or plugins (like in MkDocs)</li> <li>Editing existing scripts I find online</li> <li>Occasionally writing short scripts for small tasks</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/javascript/#what-i-know","title":"What I Know","text":"<ul> <li>Basic syntax: variables, functions, conditionals</li> <li><code>console.log()</code> for debugging</li> <li>DOM manipulation with <code>document.querySelector()</code></li> <li>Handling events like button clicks</li> <li>Using copy-pasted examples from MDN or Stack Overflow \ud83d\ude05</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/javascript/#notes-for-future-me","title":"Notes for Future Me","text":"<p>If I ever decide to go deeper into JavaScript, I\u2019d like to explore:</p> <ul> <li>Using it with Node.js for automation</li> <li>Understanding modern syntax (ES6+)</li> <li>Building small web tools or UI components</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/javascript/#references","title":"References","text":"<ul> <li>MDN Web Docs \u2013 JavaScript</li> <li>JavaScript for Beginners</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/markdown/","title":"Markdown","text":"<p>One of the best things I\u2019ve learned. I use Markdown almost hourly.</p> <p>It allows me to take notes quickly, stay organized, and document everything from simple lists to full websites. This entire page is written in Markdown.</p>"},{"location":"How-I-Work/technical/OS/languages/markdown/#why-i-love-it","title":"Why I Love It","text":"<ul> <li>Speed \u2014 I can type without reaching for the mouse or formatting toolbar</li> <li>Clarity \u2014 My thoughts stay focused, not distracted by styling</li> <li>Portability \u2014 It works in editors, terminals, websites, and documentation tools</li> <li>Control \u2014 Especially when paired with tools like MkDocs, I can build fast websites with full control over layout and style</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/markdown/#everyday-uses","title":"Everyday Uses","text":"<ul> <li>Taking meeting notes</li> <li>Planning projects and to-do lists</li> <li>Writing documentation and assignments</li> <li>journaling</li> <li>Structuring webpages</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/markdown/#favorite-features","title":"Favorite Features","text":"<ul> <li><code>#</code> Headings for structure</li> <li><code>-</code> Lists for everything</li> <li><code>code blocks</code> for technical documentation</li> <li>Inline formatting with <code>*italics*</code>, <code>**bold**</code>, and links</li> <li>Embedding images for visual notes and guides</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/markdown/#markdown-mkdocs","title":"Markdown + MkDocs = \ud83d\ude80","text":"<p>Being able to turn Markdown into a full-featured website is incredibly empowering. It keeps writing and editing fast, and styling is handled separately, which means I can stay in flow.</p>"},{"location":"How-I-Work/technical/OS/languages/markdown/#extended-power","title":"Extended Power \ud83d\udca1","text":"<p>I also use Markdown beyond the basics \u2014 thanks to MkDocs Material and its extensions:</p>"},{"location":"How-I-Work/technical/OS/languages/markdown/#diagrams-with-mermaid","title":"\ud83e\udde0 Diagrams with Mermaid","text":"<p>Useful for planning systems and flows:</p> <pre><code>```mermaid\ngraph TD;\n  A[Start] --&gt; B{Decision};\n  B -- Yes --&gt; C[Continue];\n  B -- No --&gt; D[Stop];\n</code></pre> <pre><code>### \ud83d\udcd0 Math formulas with KaTeX\n\nWrite equations in LaTeX-style syntax:\n\n```markdown\n$$ E = mc^2 $$\n</code></pre>"},{"location":"How-I-Work/technical/OS/languages/markdown/#task-lists","title":"\u2705 Task Lists","text":"<pre><code>- [x] Write draft\n- [ ] Revise section\n- [ ] Publish\n</code></pre>"},{"location":"How-I-Work/technical/OS/languages/markdown/#admonitions-notes-tips-warnings","title":"Admonitions (Notes, Tips, Warnings)","text":"<p>For adding visual callouts using:</p> <pre><code>!!! note\n    This is a note.\n\n!!! warning\n    This is a warning.\n</code></pre>"},{"location":"How-I-Work/technical/OS/languages/markdown/#tools-i-use","title":"Tools I Use","text":"<ul> <li>VS Code and Neovim \u2014 for writing Markdown</li> <li>Glow \u2014 for previewing in the terminal</li> <li>Markdown PDF extension \u2014 for exporting styled PDFs</li> <li>MkDocs Material \u2014 for building this site</li> <li>typora</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/markdown/#tips-for-future-me","title":"Tips for Future Me","text":"<ul> <li>Explore Markdown extensions like footnotes, callouts, and collapsibles</li> <li>Try out static site generators beyond MkDocs (like Astro, Eleventy, etc.)</li> <li>Keep it simple \u2014 Markdown is best when it stays minimal</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/markdown/#resources","title":"Resources","text":"<ul> <li>Markdown Guide</li> <li>MkDocs Material</li> <li>Mermaid Docs</li> <li>KaTeX Docs</li> </ul>"},{"location":"How-I-Work/technical/OS/languages/python/","title":"Python","text":"<p>Python is the language I reach for when I want to build something quickly, script a workflow, or teach programming.</p> <p>It\u2019s simple, expressive, and supported almost everywhere \u2014 which makes it ideal for prototyping, automation, and working with students.</p> <p>I use Python in: - MicroPython projects - Data analysis - Command-line tools - Markdown and build automation</p> <p>It\u2019s not always the fastest language, but it's flexible and gets the job done.</p>"},{"location":"How-I-Work/technical/OS/languages/r/","title":"R","text":"<p>I don\u2019t use R daily, but I\u2019ve used it when working with data analysis, visualization, or statistical work.</p> <p>It\u2019s powerful for data-heavy projects \u2014 especially when I want quick plots, summaries, or transformations.</p> <p>I tend to use it in specific situations rather than general scripting, but it\u2019s a useful tool to have in the box.</p>"},{"location":"How-I-Work/technical/OS/platforms/arduino/","title":"Arduino IDE","text":"<p>I used the Arduino IDE when I was getting started, and I still return to it occasionally \u2014 especially for teaching or when working with beginners.</p> <p>It\u2019s simple, approachable, and has a huge community behind it.</p> <p>Most of my Arduino-based projects now run through PlatformIO, but I keep the IDE around for: - Quick testing - Troubleshooting bootloaders - Demonstrating the basics</p>"},{"location":"How-I-Work/technical/OS/platforms/micropython/","title":"MicroPython","text":"<p>I use MicroPython when I want to build something quickly with a microcontroller and keep the code lightweight and readable.</p> <p>It\u2019s perfect for teaching, prototyping, and small-scale automation \u2014 especially with boards like the RP2040.</p> <p>I like that I can: - Write and test code in real time - Avoid long compile/upload cycles - Use Python syntax in embedded environments</p> <p>It lowers the entry barrier without sacrificing too much power.</p>"},{"location":"How-I-Work/technical/OS/platforms/platformio/","title":"PlatformIO","text":"<p>PlatformIO is my preferred environment for embedded development in C and C++. It supports a wide range of boards and platforms, and integrates well with both VS Code and Neovim.</p> <p>I use it because: - It\u2019s flexible and portable - It handles build and upload tools automatically - It\u2019s easy to manage dependencies across projects</p> <p>It also plays nicely with Git and lets me keep my firmware projects version-controlled and reproducible.</p>"},{"location":"How-I-Work/technical/design_tools/","title":"Design Tools","text":"<p>This section includes the tools I use for visual design, 2D and 3D modeling and general creative work.</p> <p>I\u2019m not a designer in the traditional sense, but I often need to communicate ideas visually, whether that\u2019s through schematics, technical drawings, renders, or illustrations.</p> <p>These tools help me do that in a way that\u2019s clear, practical, and sometimes even fun.</p>"},{"location":"How-I-Work/technical/design_tools/#tools","title":"Tools","text":"<ul> <li>Blender 3D</li> <li>Inkscape</li> <li>FreeCAD</li> <li>Photopea</li> </ul>"},{"location":"How-I-Work/technical/design_tools/blender/","title":"Blender 3D","text":"<p>I use Blender for 3D visualization, renders, and sometimes modeling enclosures or concepts before moving into CAD.</p> <p>It\u2019s powerful and complex, but I usually stick to the basics: - Quick models for demos or visuals - Animation previews or concept shots - Exporting STL or 3MF if needed</p> <p>Blender is overkill for some things \u2014 but when I need it, it's hard to beat.</p>"},{"location":"How-I-Work/technical/design_tools/freecad/","title":"FreeCAD","text":"<p>FreeCAD is my main tool for parametric 3D modeling. I use it for designing enclosures, brackets, fixtures, and any parts I need to 3D print or machine.</p> <p>What I like: - Full parametric control - Open file format - Integration with KiCad for board and case fit</p> <p>I don\u2019t use every feature, but I\u2019ve built a solid workflow around sketching, constraints, and exporting STL/STEP files.</p>"},{"location":"How-I-Work/technical/design_tools/inkscape/","title":"Inkscape","text":"<p>Inkscape is my main tool for 2D vector design \u2014 especially when working on laser cutting, vinyl cutting, or making diagrams.</p> <p>It works great for: - SVG exports to machines - Front panel and PCB artwork - Simple icons and illustrations</p> <p>I like how it plays well with other tools in my workflow, and it's lightweight enough to run on almost anything.</p>"},{"location":"How-I-Work/technical/design_tools/photopea/","title":"Photopea","text":"<p>Photopea is a browser-based image editor that works like Photoshop \u2014 but without the install or the cost.</p> <p>I use it for quick image editing, layout tweaks, and small design tasks where I don\u2019t want to open a full graphics suite.</p> <p>What I like: - Works in the browser - Supports PSD, SVG, and export formats - Great for quick fixes and mockups</p> <p>It\u2019s perfect for working on a borrowed machine or making last-minute edits on the go.</p>"},{"location":"Resourses/books/","title":"Books","text":"<p>Info</p> <p>I'm setting up a bookshelf on this site that is not ready in the meanwhile here is a list of some of my favorite books.</p>"},{"location":"Resourses/books/#read","title":"Read","text":"<p> Every Tool is a Hammer  A fun, hands-on look into the messy joy of making from MythBuster Adam Savage.</p> <p> The Checklist Manifesto  A simple but powerful tool for managing complexity and getting things right.</p> <p> Hackers: Heroes of the Computer Revolution  Tells the story of the original hackers who shaped modern computing.</p> <p> Do Design A short book on designing with beauty, clarity, and meaning.</p> <p> The Lean Startup  A foundational method for building fast, testing early, and learning quickly.</p> <p> Start with Why People don\u2019t buy what you do \u2014 they buy why you do it.</p> <p> Non-Bullshit Innovation  Real innovation stories from around the world, minus the hype.</p> <p> The Maker Movement Manifesto  Principles behind the maker movement and why it matters.</p>"},{"location":"Resourses/books/#still-reading","title":"Still Reading","text":"<p> The Box  How the shipping container quietly reshaped global trade.</p> <p> Tribes  Leading people who care about the same thing you do.</p> <p> This Is Marketing  Marketing that feels human and serves real people.</p>"},{"location":"Resourses/books/#on-the-radar","title":"On the radar","text":"<p> The Ten Faces of Innovation  Different innovation roles and how they work in creative teams.</p> <p> Door to Door  A behind-the-scenes look at how stuff gets from factory to front porch.</p> <p> The Founder's Dilemmas  The hard decisions startup founders face, and what to watch out for.</p> <p> The Innovation Delusion  Why maintenance matters more than we give it credit for.</p> <p> Made to Stick  Why some ideas last \u2014 and how to make yours unforgettable.</p> <p> Never Split the Difference  Tactical negotiation advice from a former FBI hostage negotiator.</p> <p> Creating Innovators  How to raise and support the next generation of problem-solvers.</p> <p> Why We Make Things and Why It Matters  A craftsman\u2019s perspective on the meaning and value of making.</p> <p> Managing Innovation  Innovation Management, provides a strong knowledge base and a creative and entrepreneurial management mindset</p>"},{"location":"Resourses/my_dotfiles/","title":"My Dotfiles","text":"<p>Where the goal is perfection but I'm usually just happy that it sort of works.</p> <p>These dotfiles are tuned for speed, clarity, and some chaos. They cover my setup for terminal workflows, file browsing, and editing.</p> <p>My dotfiles aren't perfect. They're still evolving, and someday they'll grow old and die... just like me. (No worries, my health is fine.)</p> <p>Warning this is a rabbit hole \ud83d\udd73\ufe0f\ud83d\udc07</p> <p>\u2192 Now that you've been warned, dive in the dotfiles on GitHub on your own risk </p>"},{"location":"Resourses/thing_i_like/","title":"Things I like","text":"<p>Things you will see on my desk and travel. every think is thought to bring the most quality to life and being replaceable when I lose it. </p> <p>here is a list of things I've come to like:</p>"},{"location":"Resourses/thing_i_like/#stationary","title":"Stationary","text":"<ul> <li>blackwing pencil</li> <li>rhodia notebook dot matrix</li> <li>stabilo point 88 </li> </ul>"},{"location":"Resourses/thing_i_like/#computure-related","title":"computure related","text":"<ul> <li>mouse mx2s</li> <li>ducky keyboard </li> <li>logitech r500s</li> <li>Thinkpads</li> </ul>"},{"location":"Resourses/thing_i_like/#edc","title":"edc","text":"<ul> <li>Hoto screw driver</li> <li>sharpi or milwauke marker</li> <li>milwauke fineline pen</li> <li>knipex (tsa took it)</li> <li>tsa approved letterman (TSA in poland took it)</li> <li>swis armi knife mini(cant travel with it)</li> </ul>"},{"location":"Resourses/thing_i_like/#other","title":"other","text":"<ul> <li>keep cup</li> <li>thermo cup</li> <li>ring on finger </li> <li>Dimension: inside diameter 18mm / thickness 1mm / width 12mm material : 325 silver</li> <li>ear ring </li> <li>dimensions: 7mm w / outside diameter 20mm / thickness 1.5mm material : 325 silver</li> <li>Casio watch</li> <li>leather(probably fake) armband looped 3 times</li> <li>over all length 30cm</li> </ul>"},{"location":"Resourses/Bookshelf/","title":"Bookshelf","text":""},{"location":"Resourses/Bookshelf/on_the_radar/","title":"Books on the radar","text":""},{"location":"Resourses/Bookshelf/reading/","title":"Books I'm reading","text":"<p> The Box </p> <p>How the shipping container quietly reshaped global trade.</p> <p> Tribes </p> <p>Leading people who care about the same thing you do.</p> <p> This Is Marketing </p> <p>Marketing that feels human and serves real people.</p> <p> Chip War: The Fight for the World's Most Critical Technology </p> <p>An epic account of the decades-long battle to control what has emerged as the world's most critical resource\u2014microchip technology\u2014with the United States and China increasingly in conflict.</p>"},{"location":"Resourses/Bookshelf/Electronics/electronics/","title":"Electronics","text":""},{"location":"Resourses/Bookshelf/design/design/","title":"Design","text":"<p> Do Design  A short book on designing with beauty, clarity, and meaning.</p>"},{"location":"Resourses/Bookshelf/fiction/fiction/","title":"Fiction","text":"<p> The Expanse #1 Leviathan Wakes </p> <p>Humanity has colonized the solar system\u2014Mars, the Moon, the Asteroid Belt and beyond\u2014but the stars are still out of our reach.</p>"},{"location":"Resourses/Bookshelf/innovation/innovation/","title":"Innovation","text":"<p> Non-Bullshit Innovation  Real innovation stories from around the world, minus the hype.</p>"},{"location":"Resourses/Bookshelf/other/other/","title":"Other","text":""},{"location":"journal/","title":"My adventures","text":"<p>Documentation of my adventures any thing from small projects, experiments, things I'm learning and trips.</p>"},{"location":"journal/instructor-bootcamp-leon/","title":"Instructor Bootcamp Leon","text":"<p>In January 2024, I traveled to Le\u00f3n, Spain, to take part in the Fab Academy Instructor Bootcamp. This time I had some good company traveling with Svavar so we were team Fab Lab \u00cdsafj\u00f6r\u00f0ur! Andri from Fab Lab Reykjav\u00edk and Frosti from Fab Lab Vestmannaeyjar joined us in Reykjav\u00edk. A proper Icelandic Fab Lab squad.</p> <p>The plan was simple: fly to Madrid, take the train to Le\u00f3n, and get some rest before the first day.</p> <p>Well\u2026 we landed late. The train had stopped running. Frosti made the wise decision to stay overnight. The rest of us (less wise) decided to take the bus, which turned out to be a 6-hour ride. After a cramped journey, we finally arrived in Le\u00f3n at 3:00 AM to a city fast asleep.</p> <p></p> <p>Info</p> <p>Documentation still in progress.</p>"},{"location":"journal/instructor-bootcamp-leon/#arrival-location","title":"Arrival &amp; Location","text":"<p>Fab Lab Le\u00f3n has its own flow, and it\u2019s a big space. The days felt a bit longer, and so did the meals. Also: so much ham. We were in Spain after all.</p> <p>The lab is located next to a mall, around a 15-minute walk from where we were staying. The vibe was familiar: workshop tables, stacked tools, people moving between conversations and machines. A space full of activity and possibility.</p>"},{"location":"journal/instructor-bootcamp-leon/#arriving-at-the-lab","title":"Arriving at the Lab","text":"<p>One of the best parts of any bootcamp is meeting others instructors, coordinators, and the local lab team. People who are teaching, learning, prototyping, documenting, adapting. It\u2019s always inspiring to see how diverse and passionate this community is.</p>"},{"location":"journal/instructor-bootcamp-leon/#workshops-projects","title":"Workshops &amp; Projects","text":"<p>We explored a variety of topics from workflows and machine maintenance to educational strategies and emerging tools.</p> <p>Full documentation: \ud83d\udc49 Fab Academy 2024 \u2013 Instructor Bootcamp \ud83d\udc49 Local site \u2013 Le\u00f3n</p> <p>It was refreshing to step out of our usual lab routines and engage with ideas from other instructors trying out different techniques, testing assumptions, and even debugging things together.</p> <p> </p>"},{"location":"journal/instructor-bootcamp-leon/#takeaways","title":"Takeaways","text":"<p>Every bootcamp reinforces something different. This time, for me, it was about collaboration and alignment syncing teaching strategies, documentation habits, and expectations across labs. It also gave me time to reflect on how we\u2019re building our Fab Lab ecosystems back home.</p> <p>I left Le\u00f3n on a high-speed train to Madrid a welcome change from the bus. I spent a day there before heading to the Nordic Bootcamp.</p> <p>Spain in January isn\u2019t a bad idea either.</p>"},{"location":"journal/instructor-bootcamp--amsterdam/","title":"Instructor Bootcamp \u2013 Amsterdam","text":"<p>In January 2023, I flew to Amsterdam with my great colleague and friend \u00c1rni from Fab Lab Akureyri to attend the Fab Academy Instructor Bootcamp, a gathering of Fab Lab instructors, past students, and core team members from all over the world. The goal: level up our skills, share knowledge, and connect with the global Fab Lab network.</p> <p></p>"},{"location":"journal/instructor-bootcamp--amsterdam/#the-castle","title":"The Castle","text":"<p>After landing, we took the airport train to Amsterdam Central. The Fab Lab is right in the city center and even better, it's inside an old castle.</p> <p>I had heard about this, but walking up to a literal medieval tower, ringing a bell, and entering a space full of cutting-edge digital fabrication tools was surreal. Climbing the stone staircase into the kitchen space, I was delighted to find a beautiful espresso machine, a machine every lab should aspire to own.</p> <p>I stayed just across the river from the lab but didn\u2019t go to the apartment until after the first day. Each morning and evening involved a 20-minute walk and a short ferry ride, which turned out to be a perfect time for reflection before and after full-on days filled with workshops and conversations that were deep, informative, personal, and often funny.</p> <p></p>"},{"location":"journal/instructor-bootcamp--amsterdam/#meeting-the-team","title":"Meeting the Team","text":"<p>Meeting so many brilliant people from every corner of the world was easily one of the biggest highlights. I especially loved reconnecting with old colleagues, including Bas, my former Fab Academy instructor.</p> <p>There\u2019s something special about these in-person meetups after years of online chats and asynchronous collaboration.</p>"},{"location":"journal/instructor-bootcamp--amsterdam/#workshops-projects","title":"Workshops &amp; Projects","text":"<p>The days were packed. We covered everything from machine building and pedagogy to new tools like Modular Things, and everything was well documented on the spot. You can dive into the full documentation here:</p> <p>\ud83d\udc49 Instructor Bootcamp 2023 \u2013 Full Documentation</p> <p>We got hands-on with new tools, skills, and workflows, shared ideas in show-and-tell sessions, and worked on projects. These are the moments where you really feel the Fab Lab network at work, connecting people who are building and learning with each other.</p>"},{"location":"journal/instructor-bootcamp--amsterdam/#projects","title":"Projects","text":"<p>SVG-PCB Leo introduced us to SVG-PCB a project that uses JavaScript to design PCBs directly from SVGs, skipping the schematic phase entirely. It\u2019s an interesting new workflow and a refreshing take on board design. Leo also comes from the Hack Club community and shared many other awesome projects they\u2019re working on. One standout was Sprig, a DIY game console you can program in JavaScript.</p> <p>Fully Printed Axis The belt 3D printer (SainSmart INFI-20) had been cleverly mounted on the wall to save space and that sparked an idea. Babken wondered if it could be used to print a full 1-meter linear axis, something that had been tried before horizontally without much success. Babken, who\u2019s great with FreeCAD, drew up a new design and successfully printed the axis vertically. It was later integrated with Modular Things to create a functional linear motion system.</p> <p>Team Voron Voron is an open-source printer capable of very fast print times. The lab had printed and gathered most of the parts for one, so a team formed to assemble it. \u00c1rni joined the team, but unfortunately, a few key parts were missing so they couldn\u2019t finish assembly or run tests during the bootcamp.</p> <p></p>"},{"location":"journal/instructor-bootcamp--amsterdam/#talks-presentations","title":"Talks &amp; Presentations","text":"<p>Throughout the days, we also had ongoing Fab Academy\u2013related discussions. Topics included the Assessment Guide, evaluation strategies, and schedule planning with Prof. Neil Gershenfeld. These sessions were documented on the Fab Cloud and offered valuable insight into how we approach teaching and evaluating digital fabrication worldwide.</p>"},{"location":"journal/instructor-bootcamp--amsterdam/#155-year-anniversary-party","title":"15.5-Year Anniversary Party \ud83c\udf89","text":"<p>Waag's Fab Lab has deep roots 15 years strong. Since they hadn\u2019t managed to celebrate the actual anniversary the year before, the decision was made: let\u2019s throw a 15.5-year anniversary party instead.</p> <p>It was a beautiful event. People from all corners of the community came by, and the celebration included machines, music, and meaningful conversations.</p> <p>I reached out to a certain Icelandic RAVE DJ known as DJoddi, who happened to be available. One thing led to another, and soon we had a proper dance party on our hands, which wasn\u2019t too hard to get going.</p>"},{"location":"journal/instructor-bootcamp--amsterdam/#thoughts","title":"Thoughts","text":"<p>What stood out most wasn\u2019t just the content, it was the vibe. This bootcamp wasn\u2019t about learning from the top; it was about learning with each other. Everyone had something to teach. Everyone had something to learn.</p> <p>I left with new skills, fresh inspiration, and a renewed sense of why we do what we do.</p> <p>Fab Labs aren't just spaces they\u2019re communities built on sharing, tinkering, failing forward, and occasionally taking a ferry to get there.</p> <p></p>"},{"location":"journal/git-terminal-journey/","title":"Git terminal journey","text":"<p>Useful things I've learned in the terminal mostly git stuff but also includes some general terminal stuff. As a terminal I'm using GitBash.</p> <p>good git cheat sheet</p> <p></p>"},{"location":"journal/git-terminal-journey/#git-command-to-see-commit-tree","title":"git command to see commit tree","text":"<p>Git log is a useful command to list commit history</p> <p>With command below you can get a more graphic view of this history.</p> <p><code>git log --graph --oneline --all</code></p> <ul> <li>https://stackoverflow.com/questions/1064361/unable-to-show-a-git-tree-in-terminal</li> <li>https://gitready.com/intermediate/2009/01/26/text-based-graph.html</li> <li>https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git</li> <li>https://www.geeksforgeeks.org/how-to-visualizing-branch-topology-in-git/</li> <li></li> </ul>"},{"location":"journal/git-terminal-journey/#double-tapping-tab-shows-all-possibilities","title":"double tapping tab shows all possibilities","text":"<p>double tapping tab</p> <p>Display all 2588 possibilities? (y or n)</p> <ul> <li>https://unix.stackexchange.com/questions/171489/shell-display-all-2588-possibilities</li> </ul>"},{"location":"journal/git-terminal-journey/#git-add-dot","title":"git add dot","text":"<p>seams like it better to use git add . when pushing to github so it looks at the .gitignore file.</p> <p>What does the 'git add .' ('git add' single dot) command do?</p>"},{"location":"journal/git-terminal-journey/#undoing-things-in-git","title":"Undoing things in git","text":""},{"location":"journal/git-terminal-journey/#way-1-git-reset","title":"way 1 git reset","text":"<p>doing git reset head~ --hard this goes back and deleates all changes"},{"location":"journal/git-terminal-journey/#way-2-git-checkout","title":"way 2 git checkout","text":"<p>doing git checkout to the commit you want and then doing a commit naming a new branch. When that is done you rename the main brach to some thing like old-main. after that you can rename the branch made to main.</p> <ul> <li>google</li> <li>git how to move main to another branch without merge</li> <li> <p>git how to create a branch</p> </li> <li> <p>great video what to do</p> </li> <li>hot to name branch</li> <li></li> </ul>"},{"location":"journal/git-terminal-journey/#whats-the-difference-between-head-and-head","title":"What's the difference between HEAD^ and HEAD~","text":"<p>adding ~ behind head moves back the number of steps you want you can also add commit id.</p> <ul> <li>https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git</li> </ul>"},{"location":"journal/journey-to-neovim/","title":"Journey to Neovim","text":"<p>I remember the feeling of opening Vim for the first time some years ago when I switched to Linux. It felt like being transported into another dimension an empty one with no way out. After closing my terminal in panic, I never dared touch it again. Later, when I described what I had experienced to a programmer friend, he just smiled and said, \u201cIt\u2019s cool though.\u201d So I looked into it a bit, but it was overwhelming.</p> <p>Now, years later, I\u2019m much more comfortable in the terminal. And after recently redoing my Zsh setup, the idea of trying Vim again came back but this time through Neovim: a modern version of Vim with a strong community and Lua-based configuration.</p> <p></p> <p>At the time, I knew almost nothing about Lua other than it was used in Roblox. Still, I got a bit too ambitious. I thought, \u201cSure, I can just build my perfect setup!\u201d I wanted it to look good, work well with Markdown, and support embedded electronics workflows.</p> <p>So I asked AI to help me make the perfect config.</p> <p>That quickly turned into an overwhelming pile of errors and crashes.</p> <p>Still determined (my friend did say Neovim was good), I looked into pre-configured setups like LazyVim. But I couldn\u2019t really wrap my head around them everything felt too abstract and bloated. I gave up again.</p>"},{"location":"journal/journey-to-neovim/#kickstarting-the-journey","title":"Kickstarting the Journey","text":"<p>Then came March 28th, 2025 nearly 28 days later.</p> <p>I was confused, exhausted, and wondering: Why do people even use this thing?</p> <p>That\u2019s when I stumbled upon a huge cloth banner on the web that said KICKSTART and found TJ DeVries\u2019 video\u201cThe Only Video You Need to Get Started with Neovim.\u201d</p> <p>Finally something that worked out of the box and was simple enough to understand and modify.</p> <p>Kickstart gave me a few good weeks of productivity and confidence. Then I felt ready to take the leap again and build something of my own.</p> <p>I had seen people structure their configs with modular directories, keeping each plugin and setting neatly organized. That\u2019s when I finally found the tutorial I wished I had found on day one: Josean Martinez\u2019s 2024 Neovim guide, paired with a video that walked through the setup step-by-step. It led me to a clean, modular layout that just made sense.</p>"},{"location":"journal/journey-to-neovim/#where-i-am-now","title":"Where I Am Now","text":"<p>Months later, I feel like I\u2019ve had the vaccine.</p> <p>I'm on a never-ending journey to shape Neovim to fit the way I think and work. I\u2019m more familiar with Lua, and I\u2019m comfortable navigating buffers and using Vim motions. I feel equally at home in Neovim as I ever did in VS Code.</p> <p>In fact, I find myself reaching for Neovim more and more and opening VS Code less and less.</p> <p>VS Code is still a solid editor. Sure, it\u2019s not fully open source (Codium is a thing, if that matters to you), but what I\u2019ve learned and what many others have said is this:</p> <p>Don\u2019t try to make Neovim exactly like VS Code. If that\u2019s your goal, you might as well just use VS Code.</p> <p>Both are great tools like a helicopter and an airplane. They both fly, but they handle differently, and choosing one over the other depends on your destination and how you want to get there.</p> <p>Is Neovim the helicopter or the jet?</p> <p>That\u2019s up to you to decide.</p>"},{"location":"journal/journey-to-neovim/#details-about-my-current-setup","title":"Details about my current setup","text":"<p>You\u2019ll find information about the Neovim setup I use today under How I Work. It\u2019s evolving and changing all the time.</p> <p>If you want to look back at where it started the disaster configs, the LazyVim phase, Kickstart, or snapshots along the way you can browse the commit history in my dotfiles.</p>"},{"location":"journal/vs-code-journey/","title":"VS Code Journey","text":"<p>git cli</p> <p>This is document with things I`ve learned and change in VS code to adapt it to my work flow for more efficiency and speed.</p> <p></p>"},{"location":"journal/vs-code-journey/#short-cuts","title":"short cuts","text":""},{"location":"journal/vs-code-journey/#a-way-to-close-and-open-the-terminal","title":"A way to close and open the terminal","text":"<p><code>ctrl+j</code></p>"},{"location":"journal/vs-code-journey/#making-terminal-fullscreen-presing-again-changes-back-to-editor","title":"making terminal fullscreen presing again changes back to editor","text":""},{"location":"journal/vs-code-journey/#-httpsstackoverflowcomquestions48511956toggle-between-fullscreen-editor-and-terminal-in-vs-code","title":"- https://stackoverflow.com/questions/48511956/toggle-between-fullscreen-editor-and-terminal-in-vs-code","text":"<p><code>ctrl+shift+m</code> this I had to add into the keybinding.json file.</p> <pre><code>{\n    \"key\": \"ctrl+alt+m\",\n    \"command\": \"workbench.action.toggleMaximizedPanel\"\n }\n</code></pre>"},{"location":"journal/vs-code-journey/#focus-editor-terminal","title":"focus editor terminal","text":"<ul> <li>https://superuser.com/questions/1270103/how-to-switch-the-cursor-between-terminal-and-code-in-vscode </li> </ul> <p><code>ctrl+&lt;</code> switching focus between terminal and editor. Json link below</p> <pre><code>    {\n        \"key\": \"ctrl+oem_102\",\n        \"command\": \"workbench.action.focusActiveEditorGroup\",\n        \"when\": \"terminalFocus\"\n    },\n    {\n        \"key\": \"ctrl+oem_102\",\n        \"command\": \"terminal.focus\",\n        \"when\": \"!terminalFocus\"\n    },\n</code></pre>"},{"location":"journal/vs-code-journey/#remapping-using-auto-hotkey-or-power-toys","title":"remapping using auto hotkey or power toys","text":"<p>Adding code block you have to use this topcomma ` a lot its not on my keyboard so ive remapped it I used the question mark but can now see its a problem. topic on this matter</p> <p>alt 96     `</p> <p>come back to it later right now it's unresolved</p> <p>https://www.freecodecamp.org/news/alt-codes-special-characters-keyboard-symbols-windows-list/ </p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/","title":"\ud83d\udd0d Round 1: Reverse Engineering an .elf file","text":"<p>In this session, we explored how to reverse engineer an Arduino blink sketch from its compiled binary files using various tools like GDB, avr-objdump, and strings.</p> <p></p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#1-extracting-and-viewing-compiled-code","title":"1\ufe0f\u20e3 Extracting and Viewing Compiled Code","text":"<p>When you compile an Arduino <code>.ino</code> sketch, it goes through several stages: </p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#arduino-compilation-process-step-by-step","title":"Arduino Compilation Process (Step-by-Step)","text":"<p>When you upload or verify a sketch in the Arduino IDE, this is what happens:</p> <p>1\ufe0f\u20e3 You write your .ino file</p> <ul> <li>This is your original Arduino sketch with comments.</li> </ul> <p>2\ufe0f\u20e3 Arduino converts the .ino file into a .cpp file</p> <ul> <li>Adds #include  at the top. <li>Adds function prototypes automatically.</li> <li>Keeps all your comments and formatting.</li> <li>This is what you see inside /tmp/arduino/sketches/.</li> <p>3\ufe0f\u20e3 The .cpp file is compiled into an .elf file</p> <ul> <li>The compiler removes comments since they are not needed for execution.</li> <li>The resulting .elf file is a binary with debugging symbols (if enabled).</li> <li>GDB reads this .elf file, which is why comments don\u2019t appear in list setup.</li> </ul> <p>4\ufe0f\u20e3 The .elf file is turned into a .hex file</p> <ul> <li>The .hex file is the final machine code that gets uploaded to your Arduino.</li> </ul>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#table-with-the-stages","title":"table with the stages","text":"File Type Stage Contains? <code>.ino</code> Original Sketch \u2705 Full code with comments <code>.cpp</code> Converted C++ Code \u2705 Code + comments (before compilation) <code>.elf</code> Compiled Binary with Debug Symbols \u274c No comments, but keeps function names <code>.hex</code> Final Machine Code \u274c Just raw instructions <p>Run this command to disassemble with function names and register info:</p> <p><pre><code>avr-objdump -d -m avr sketch_feb18a_binary_view.ino.elf\n</code></pre> - This will show labels for functions, making it easier to follow.</p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#enable-debug-symbols-in-arduino","title":"Enable Debug Symbols in Arduino","text":"<p>To check if the ELF file contains debugging symbols (source code references), run:</p> <pre><code>avr-readelf -S sketch_feb18a_binary_view.ino.elf\n</code></pre> <p>Look for a section like .debug_info or .stab. If these are missing, it means the debug symbols were removed during compilation.</p> <p>If you enable \"verbose output during compile\", it will:</p> <p>To do this go to Arduino Preferences and check \"show verbose output during <code>compile</code> </p> <ul> <li>Show the exact compiler commands used by the Arduino IDE.</li> <li>Help verify whether the -g flag is actually applied after modifying platform.txt.</li> <li>Allow you to see which files are being compiled and linked.</li> </ul>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#cpp","title":"CPP","text":"<p>To locate the temporary <code>.cpp</code> file generated by the Arduino IDE, use: <pre><code>find /tmp/arduino/sketches/ -name \"*.cpp\"\n</code></pre> Then open it:</p> <p><pre><code>cat /tmp/arduino/sketches/XXX/sketch.ino.cpp\n</code></pre> This file contains your full Arduino sketch before compilation.</p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#avr-objdump","title":"avr-objdump","text":"<p>Since the .elf file now has debugging info, let's try disassembling it with source code mixed in: <pre><code>avr-objdump -S -m avr /tmp/arduino/sketches/8534B750395F4456786188B674E891FB/sketch_feb18a_binary_view.ino.elf\n</code></pre></p> <p>To dump the entire source code mixed with assembly, run:</p> <pre><code>avr-objdump -SC -m avr /tmp/arduino/sketches/8534B750395F4456786188B674E891FB/sketch_feb18a_binary_view.ino.elf &gt; full_code.txt\n</code></pre>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#2-using-gdb-to-analyze-the-compiled-elf-file","title":"\ud83d\udee0 2\ufe0f\u20e3 Using GDB to Analyze the Compiled .elf File","text":"<p>To debug the compiled Arduino binary, we used GDB (avr-gdb):</p> <pre><code>avr-gdb /tmp/arduino/sketches/XXX/sketch.ino.elf\n</code></pre>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#useful-gdb-commands","title":"Useful GDB commands","text":"<p><pre><code>list                # list code 10 lines at a time\nlist 1              # restart list to start from beginning\nlist setup          # Shows the setup() function\nlist loop           # Shows the loop() function\ninfo functions      # Lists all functions in the binary\nprint variable      # Prints a variable's value\ndirectory /tmp/...  # Points GDB to the correct source folder\nquit                # end the session\n</code></pre> If you want to see the full file, use:</p> <pre><code>while 1\n  list\nend\n</code></pre> <p>\u2705 This allowed us to recover partial C code and inspect program execution.</p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#3-extracting-hidden-comments-from-the-compiled-binary","title":"3\ufe0f\u20e3 Extracting Hidden Comments from the Compiled Binary","text":"<p>Since normal comments are stripped during compilation, we found ways to embed hidden messages that survive in the binary.</p> <p>\u2705 Trick: Using PROGMEM to Hide Comments</p> <pre><code>const char debug_comment1[] PROGMEM = \"\u00deetta er fali\u00f0 comment.\";\nconst char debug_comment2[] PROGMEM = \"Er ekki Reverse engineering skemmtilegt!\";\n</code></pre> <p>\u2705 Finding Hidden Messages in the Binary</p> <p><pre><code>strings sketch.elf | grep \"ekki\"\n</code></pre> or</p> <pre><code>avr-objdump -s -j .progmem sketch.elf | grep \"\u00deetta\"\n</code></pre> <p>\ud83d\udd25 This confirmed that \"hidden comments\" survived compilation. \ud83d\udd25</p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#4-exploring-the-hex-file","title":"4\ufe0f\u20e3 Exploring the .hex File","text":"<p>The <code>.hex</code> file is the final machine code that gets uploaded to the Arduino. Unlike <code>.elf</code>, it does not contain function names or debug symbols.</p> <p>We learned that reverse engineering a <code>.hex</code> file is possible, but harder because:</p> <ul> <li>Only raw machine instructions are left</li> <li>Function names are gone</li> <li>We must reconstruct functions manually</li> </ul>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#tools-used","title":"\ud83d\udee0 Tools Used","text":"Tool Purpose GDB (avr-gdb) Debugging compiled .elf files, listing functions, stepping through code. avr-objdump Disassembly + mixed C/assembly view strings Searching for hidden messages avr-objcopy Converting .hex to raw binary"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#next-steps-reverse-engineering-the-hex-file-round-2","title":"Next Steps: Reverse Engineering the .hex File (Round 2)","text":"<p>Goal: analyze and recover code from a .hex file without using an .elf</p> <ul> <li>Can we reconstruct setup() and loop() manually?</li> <li>Can we find hidden PROGMEM messages in .hex?</li> <li>Can we understand raw machine code without function names?</li> </ul> <p>\ud83d\ude08 Let\u2019s dig deeper into low-level reverse engineering.</p>"},{"location":"journal/-round-1-reverse-engineering-an-elf-file/#summary","title":"Summary","text":"<ul> <li>Recovered <code>`.cpp</code> files from Arduino's temp build directory.</li> <li>Used GDB to analyze and extract function names from <code>.elf</code>.</li> <li>Embedded \"hidden comments\" using PROGMEM and successfully extracted them from the binary.</li> <li>Explored <code>.hex</code> files and prepared for the next phase: pure machine code reversing.</li> </ul>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/","title":"Exploring Rofi \u2013 Window Switcher and Application Launcher","text":"<p>I've been noticing I mainly use the start menu to type in the app I want to use, so I started looking into better alternatives I could replace the start menu with. I came across Ulauncher and Rofi \u2014 both looked really nice, but I decided to go with Rofi since it can not only open apps, but also act as a run dialog, SSH launcher, file switcher, and even run custom scripts like \u201cconnect to Wi-Fi\u201d or \u201cchange audio source\u201d.</p> <p></p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#installing-rofi","title":"Installing Rofi","text":"<p>Installing Rofi was straightforward using <code>apt</code>:</p> <pre><code>sudo apt update\nsudo apt install rofi\n</code></pre> <p>I could now run it in the terminal with:</p> <pre><code>rofi -show drun\n</code></pre> <p>Next step was to configure it like I do most of my keyboard navigation these days \u2014 using <code>Ctrl + j/k</code> to move down and up, and <code>Ctrl + l</code> to accept.</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#configuring-rofi","title":"Configuring Rofi","text":"<p>I created a config file in my <code>.config</code> directory:</p> <pre><code>mkdir -p ~/.config/rofi\nrofi -dump-config &gt; ~/.config/rofi/config.rasi\n</code></pre>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#remap-keys-ctrljkl-enable-icons-and-set-theme","title":"Remap keys (Ctrl+j/k/l), enable icons, and set theme","text":"<p>In the config file, I added the following configuration block. Rofi uses a custom styling format called <code>.rasi</code>, which is similar to CSS. I had to unbind some default keys to make j/k/l work, and I enabled icon support and set the font to my Nerd Font. I also applied the Monokai theme (might change that later).</p> <pre><code>@theme \"/usr/share/rofi/themes/Monokai.rasi\"\n\nconfiguration {\n  // Unbind default conflicting keybindings\n  kb-remove-to-eol:       \"\";\n  kb-mode-complete:       \"\";\n  kb-accept-entry:        \"\";\n\n  // Remap movement and accept keys\n  kb-row-down:            \"Down,Control+j\";\n  kb-row-up:              \"Up,Control+k\";\n  kb-accept-entry:        \"Return,Control+l\";\n\n  // Allow Super to cancel (close Rofi)\n  kb-cancel:              \"Escape,Super_L\";\n\n  // Enable icons and set font\n  show-icons:             true;\n  font: \"JetBrainsMono Nerd Font 12\";\n}\n</code></pre>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#binding-the-super-key-to-launch-rofi","title":"Binding the Super Key to Launch Rofi","text":"<p>To make the Super key open Rofi, I first had to disable its default behavior in Linux Mint.</p> <ol> <li>Right-click the Start menu \u2192 Configure \u2192 Behavior</li> <li>Under \u201cKeyboard shortcut to open and close the menu,\u201d I replaced <code>Super L</code> with <code>Super L + M</code> (so I can still open it with another shortcut if needed)</li> </ol> <p>Then I added a custom keyboard shortcut:</p> <ol> <li>Go to Settings \u2192 Keyboard \u2192 Shortcuts \u2192 Custom Shortcuts</li> <li>Add a new shortcut:</li> <li>Name: Launch Rofi App</li> <li>Command: <code>rofi -show drun</code></li> <li>Shortcut: <code>Super L</code></li> </ol>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#rofi-as-a-window-switcher","title":"Rofi as a Window Switcher","text":"<p>Next, I wanted to use Rofi to switch between windows \u2014 similar to <code>Alt + Tab</code>, but fuzzy and faster.</p> <p>I set it up like this:</p> <ol> <li>Go to Settings \u2192 Keyboard \u2192 Shortcuts \u2192 Custom Shortcuts</li> <li>Add a new shortcut:</li> <li>Name: Rofi Window Switcher</li> <li>Command: <code>rofi -show window</code></li> <li>Shortcut: <code>Super + V</code></li> </ol>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#rofi-wi-fi-menu-with-super-w","title":"Rofi Wi-Fi Menu with Super + W","text":"<p>One of the features I really wanted was a quick way to connect to Wi-Fi networks from the keyboard. I found ericmurphyxyz/rofi-wifi-menu , a great minimal script that uses <code>nmcli</code> and Rofi to present available Wi-Fi networks in a clean interface.</p> <p>I cloned it into my Rofi config folder to keep things tidy:</p> <pre><code>cd ~/.config/rofi\ngit clone https://github.com/ericmurphyxyz/rofi-wifi-menu.git\n</code></pre> <p>To launch it from a keybinding, I created a custom shortcut using:</p> <pre><code>/bin/bash /home/thorarinn/.config/rofi/rofi-wifi-menu/rofi-wifi-menu.sh\n</code></pre> <p>And bound it to <code>Super + W</code>.</p> <p>I also made a small tweak to the script to show the currently connected Wi-Fi network at the top of the list:</p> <pre><code># Add this near the top of the script\ncurrent_ssid=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d':' -f2)\nif [ -n \"$current_ssid\" ]; then\n    connection_info=\"\uf1eb  Connected to: $current_ssid\"\nelse\n    connection_info=\"\ufaa9  Not connected\"\nfi\n\n# Prepend this line to the list passed into rofi\nchosen_network=$(echo -e \"$connection_info\n$toggle\n$wifi_list\" | uniq -u | rofi -dmenu -i -selected-row 1 -p \"Wi-Fi SSID: \")\n</code></pre> <p>This way I can see which network I'm currently connected to before switching.</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#making-rofi-close-when-pressing-super-again","title":"Making Rofi Close When Pressing Super Again","text":"<p>Once Rofi opens, global keyboard shortcuts like <code>Super</code> are no longer detected by Cinnamon \u2014 because Rofi has focus. So I configured Rofi to treat <code>Super</code> as a cancel key (like Escape).</p> <p>This way: - Press <code>Super</code> \u2192 Rofi opens - Press <code>Super</code> again \u2192 Rofi closes</p> <p>That toggle behavior is made possible by this line in the Rofi config:</p> <pre><code>kb-cancel: \"Escape,Super_L\";\n</code></pre> <p>I also applied this same logic for <code>Super + W</code> and <code>Super + V</code>, so all my Rofi menus now open and close cleanly with the same key combo.</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#emoji-picker","title":"Emoji Picker \u26cf\ufe0f","text":"<p>I was originally looking for an emoji picker that worked with Rofi. I explored both <code>Mange/rofi-emoji</code>  and <code>fdw/rofimoji</code> , but since there wasn\u2019t a simple <code>apt</code> package for either \ud83d\ude35\u200d\ud83d\udcab I figured I might as well just use something that was easier to install \u2014 and honestly, it didn\u2019t need to be part of the Rofi setup anyway.</p> <p>So I found Emote in the Linux Mint Software Manager, and it works great for what I want. I use the default shortcut <code>Ctrl + Alt + E</code>, which is especially nice because I can hit it with one hand. \ud83d\ude0e\ud83d\udd96</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#audio-output-switcher-with-rofi","title":"Audio Output Switcher with Rofi","text":"<p>I wrote a small script that uses <code>pactl</code> to list and switch audio outputs. When launched, it shows a list of audio sinks and sets the default when one is selected.</p> <p>Saved it here: <code>~/.config/rofi/rofi-audio-switch/rofi-audio-switch.sh</code>:</p> <pre><code>#!/bin/bash\n\nsinks=$(pactl list short sinks | awk '{print $2}')\ndefault_sink=$(pactl info | grep 'Default Sink' | awk '{print $3}')\nchosen_sink=$(echo \"$sinks\" | rofi -dmenu -p \"Select Audio Output (Current: $default_sink)\")\n\nif [ -n \"$chosen_sink\" ]; then\n    pactl set-default-sink \"$chosen_sink\"\n    notify-send \"Audio Output Switched\" \"Now using: $chosen_sink\"\nfi\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x ~/.config/rofi/rofi-audio-switch/rofi-audio-switch.sh\n</code></pre> <p>Then bind to <code>Super + A</code> via Settings \u2192 Keyboard \u2192 Shortcuts.</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#bluetooth-menu-with-rofi","title":"Bluetooth Menu with Rofi","text":"<p>I\u2019m using <code>nickclyde/rofi-bluetooth</code> , which integrates <code>bluetoothctl</code> into a nice Rofi interface.</p> <p>Cloned to: <code>~/.config/rofi/rofi-bluetooth</code></p> <pre><code>git clone https://github.com/nickclyde/rofi-bluetooth ~/.config/rofi/rofi-bluetooth\nchmod +x ~/.config/rofi/rofi-bluetooth/rofi-bluetooth\n</code></pre> <p>Test it:</p> <pre><code>~/.config/rofi/rofi-bluetooth/rofi-bluetooth\n</code></pre> <p>Bind it to <code>Super + B</code> in Settings \u2192 Keyboard \u2192 Shortcuts.</p> <p>This lets me toggle paired devices with one key combo. Smooth.</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#working-on","title":"Working on","text":"<p>Info</p> <p>currently I have not tyred the calculator menu and not sure I have a need for it. I'll add some photos later or never. I also would like to add a clock, calendar and battery status.</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#final-thoughts","title":"Final Thoughts","text":"<p>With Rofi fully integrated into my workflow, I now have:</p>"},{"location":"journal/exploring-rofi--window-switcher-and-application-launcher/#rofi-keybindings-overview","title":"Rofi Keybindings Overview","text":"<p>Here's how I currently use Rofi and related tools, mapped to convenient keybindings for speed and accessibility:</p> Shortcut Action Command / Tool Speed <code>Super</code> App launcher <code>rofi -show drun</code> \u26a1 Fast <code>Super + V</code> Window switcher <code>rofi -show window</code> \u26a1 Fast <code>Super + W</code> Wi-Fi menu Custom script: <code>rofi-wifi-menu.sh</code> \ud83d\udd50 Medium <code>Super + A</code> Audio output switcher Custom script: <code>rofi-audio-switch.sh</code> \u26a1 Fast <code>Super + B</code> Bluetooth device menu Custom script: <code>rofi-bluetooth</code> \u26a1 Fast <code>Ctrl + Alt + E</code> Emoji picker GUI App: Emote \u26a1 Fast <p>And all of them feel native and responsive, with full Nerd Font icon support and a sleek Monokai theme that I customized a little.</p> <p>Rofi is one of those tools that rewards customization and can scale with you as your needs evolve. Highly recommend diving into it if you\u2019re looking for a faster, more keyboard-friendly way to move around Linux Mint.</p> <p>All my config can be found  here in my dotfiles </p>"},{"location":"journal/under-the-scope/","title":"Under the scope","text":"<p>It all started with me needing to run a quick test on an RP2040 board. Just a simple check. So I asked:  \"Hey, do we have any spare RP2040 boards lying around?\" </p> <p>Svavar, my ever-resourceful colleague, rummaged around and handed me a small stack. Among them was a Seeed Studio XIAO RP2040 he described as \u201cpretty much dead.\u201d It overheated almost instantly when plugged in and showed no signs of life over USB. He\u2019d already tried the usual recovery tricks BOOTSEL mode, re-flashing but nothing worked.</p> <p>Well, not nothing. The LED still lit up.</p> <p>Naturally, I took that as challenge accepted.</p> <p></p>"},{"location":"journal/under-the-scope/#initial-inspection","title":"Initial inspection","text":"<p>The board in question was a Seeed Studio XIAO RP2040. When plugged in, both the red power LED and blue user LED lit up. However, the RP2040 chip itself was getting hot to the touch within seconds of powering on. So my troubleshooting mode kicked in.</p> <p>Here\u2019s what I noted:</p> <ul> <li>Visual: No visible signs of damage or burns. The board does have an RF shield, so to fully investigate I\u2019d need to remove it.</li> <li>Heat: Other than the RF shield being warm, it was hard to pinpoint the heat source it was just hot. The USB connector stayed cool.</li> <li>Smell: No burnt smell, no melting plastic, and nothing unusual in the air despite the heat.</li> <li>Voltage: Not a lot of obvious test points, but I measured both 3.3V and 5V and they seemed normal.</li> <li>Terminal checks: Running <code>lsusb</code>(list USB devices), <code>dmesg -w</code>(print the kernel ring buffer ), and <code>lsblk</code>(list block devices) showed the device as <code>\"MicroPython Board in FS mode\"</code>.</li> <li>BOOTSEL test: Holding BOOTSEL while plugging it in popped up a USB drive with <code>INFO_UF2.TXT</code> and <code>INDEX.HTM</code>. So the USB bootloader and power circuitry were still functional.</li> </ul> <p>Dead hot silence but clearly something wasn\u2019t right. Why was it cooking itself?</p>"},{"location":"journal/under-the-scope/#schematic-diagnost","title":"Schematic diagnost","text":"<p>With no obvious external clues, it was time to head back to the drawing board, literally and dig into some schematics to get a better idea of the layout and pinpoint possible components that could be heating up.</p> <p>I pulled up the schematic for the Seeed Studio XIAO RP2040 board, hoping to figure out what might be pulling so much current. The first suspects were the usual ones: the voltage regulator, the flash memory, a possible short in components like one of those tiny decoupling capacitors scattered around the RP2040, and of course the RP2040 itself.</p> <p>The flash chip was easy to spot in the schematic: an 8-pin SPI chip wired to the QSPI lines on the RP2040. It runs directly off the 3.3V rail, so if it had shorted internally, that could easily explain the symptoms. Same goes for the voltage regulator if it had failed in a sneaky way, it might still output 3.3V but leak current somewhere inside.</p> <p>I didn\u2019t see anything obviously wrong, but the schematic gave me a solid mental map of what to probe next. The plan: start testing everything connected to 3.3V, especially around the RP2040 and the flash.</p> <p>To access those points, I realized it was time to bring out some physical tools.</p>"},{"location":"journal/under-the-scope/#behind-the-shield","title":"Behind the shield","text":"<p>Grabbing the hot air gun and getting to work, I removed the RF shield. And oh my... these were not the standard \u201clarge\u201d components we all know and love, like the comfortable 0805 or even 0603 packages. Nope. Welcome to the land of 0201 capacitors and some seriously tiny chips.</p> <p>If you\u2019re reading this with no technical knowledge, well done you! 0201 means the component is 0.6mm \u00d7 0.3mm. That\u2019s basically a grain of dust pretending to be a circuit.</p> <p>Once the shield was off, I could finally get a proper look at what was going on underneath. Nothing jumped out visually no burnt parts, no discoloration but now I had full access to probe components and really start hunting down the problem.</p> <p>The plan was simple: power it briefly, watch closely, and find out what got hot first.</p>"},{"location":"journal/under-the-scope/#the-great-isopropanol-trick","title":"The great isopropanol trick","text":"<p>This is by far one of the top tricks I\u2019ve learned for troubleshooting. All you need is some isopropanol, easily available and a heat problem. Here\u2019s how it goes.</p> <p>I powered up the board briefly just a few seconds and dropped a little isopropanol over the surface. The alcohol evaporates faster where there\u2019s heat, so it\u2019s a great quick and dirty or clean way to spot hot components without any delay.</p> <p>Disclaimer: I don\u2019t have a fancy thermal camera (a bit jealous, yes).</p> <p>The result? No question the RP2040 was the first thing to dry. Fast. Too fast. The surrounding components got hot later, but the MCU itself was clearly the heat source.</p> <p>That more or less confirmed it: this wasn\u2019t a passive component pulling too much current. This was likely an internal failure inside the RP2040 itself or some capacitor causing a short, making the 3.3V rail deliver all the current it could and turning it directly into heat.</p> <p>Still, I wanted one more data point before going all in on a chip swap.</p> <p>Side note: I also tested it the next day with a rosin atomizer. Same conclusion. Another great tool basically a slightly fancier version of the isopropanol trick.</p>"},{"location":"journal/under-the-scope/#low-resistance-high-current","title":"Low resistance = high current","text":"<p>Knowing that heat usually means high current, and high current can\u2019t flow unless resistance is low, I started probing around for confirmation. I began looking for obvious points of failure some of the capacitors looked suspicious, but nothing screamed \"smoking gun.\"</p> <p>Then I measured the 3.3V rail. 7 ohms. That\u2019s low. Way too low.</p> <p>The 5V rail checked out fine, but that 3.3V line? Definitely something wrong there.</p> <p>In hindsight, I probably should\u2019ve done that measurement earlier. But sometimes you\u2019ve got to circle the problem a few times before it shows itself. I confirmed my suspicion by measuring a known-good XIAO RP2040 board. The difference was obvious. Always nice to have a healthy reference board for moments like this.</p> <p>So I grabbed the soldering iron and started removing suspects. First a couple of the suspicious capacitors, they were tiny, and I figured if one had shorted, that might explain it. But after removing two, I stopped. It just didn\u2019t feel right. Those caps were easy to lose, and I didn\u2019t think they were the real cause.</p> <p>The prime suspect was still sitting there. Getting hot.</p>"},{"location":"journal/under-the-scope/#flash-nuke-one-last-shot","title":"Flash nuke: one last shot","text":"<p>Still hoping for a software miracle, I decided to give it one last shot before reaching for hot air.</p> <p>I had come across a special file called <code>flash_nuke.uf2</code> a firmware designed to completely wipe the flash memory of an RP2040. If the board was stuck in some cursed <code>main.py</code> loop or MicroPython garbage left over from previous use, this would clear it out completely.</p> <p>I dropped it onto the board in BOOTSEL mode. The upload worked fine. The board rebooted as expected.</p> <p>Then\u2026 it got hot again.</p> <p>Still the same symptom. RP2040 heating up within seconds. No change, no improvement, no relief.</p> <p>At this point, the software had been ruled out. The voltages looked normal. The flash wasn\u2019t hot. I had removed a couple of capacitors and confirmed the short was still there.</p> <p>I thought to myself, well, this is as far as I go at least until we can order spare chips. I casually mentioned this to Svavar.</p> <p>His response: \"Well, I already ordered spare RP2040 chips.\" Of course he had.  </p> <p>And just like that, he handed me a fresh RP2040.</p> <p>There was really only one thing left to do take out the chip and go under the scope.</p>"},{"location":"journal/under-the-scope/#under-the-scope_1","title":"Under the scope","text":""},{"location":"journal/under-the-scope/#preparation","title":"Preparation","text":"<p>Time for surgery.</p> <p>I gathered the tools: hot air station, microscope, flux, tweezers, soldering iron, solder paste, multimeter, and a bit of patience. The RP2040 is a QFN package, which means the pads are underneath not visible like your classic DIP or SOIC packages. You can still see them on the side so not impossible, but it still a bit demanding requiring focus.</p>"},{"location":"journal/under-the-scope/#chip-removal","title":"Chip removal","text":"<p>Not much to say here, this was the easy part.</p> <p>I set the hot air to a safe temperature, being careful not to crank the airflow too high to avoid launching those microscopic dust-sized capacitors off the board. I held the RP2040 with tweezers and just let gravity do the work. A little nudge, and off it came.</p>"},{"location":"journal/under-the-scope/#soldering-prep","title":"Soldering prep","text":"<p>After removing the chip, I cleaned the pads with some solder wick and isopropanol. The old solder came off nicely, leaving a clean surface to work with.</p> <p>My solder paste was a bit thick, so I mixed in some fresh flux to make it easier to spread and flow. A thin layer across the pads, nothing fancy or too precise.</p>"},{"location":"journal/under-the-scope/#surface-tension-ftw","title":"Surface tension FTW","text":"<p>I placed the new RP2040 onto the footprint and carefully aligned it under the scope.</p> <p>The magic of surface tension does a lot of the heavy lifting during reflow. As the solder melts, the chip gently pulls itself into perfect alignment. I love that moment it feels like the board is cooperating. After I saw the reflowing take place I nudged it a bit to get it perfectly aligned and then removed the heat and it was stuck in place.</p>"},{"location":"journal/under-the-scope/#clean-up-and-physical-verification","title":"Clean-up and physical verification","text":"<p>Once everything cooled, I went in with the iron to touch up a few pads and clean up a couple of small solder bridges. Then came the double check:</p> <ul> <li>Visually inspected every side of the chip under the scope.</li> <li>Measured pins side by side with continuity test for shorts</li> <li>Touched it up a few times until everything looked and measured well. </li> <li>Probed 3.3V and GND again, no more short.</li> </ul> <p>I was ready to power it up.</p>"},{"location":"journal/under-the-scope/#moment-of-truth-live-test","title":"Moment of truth: live test","text":"<p>Time to see if all that effort actually paid off.</p> <p>First, I powered it from a USB power brick just to play it safe. Normal red LED came on! No heat! That was encouraging.</p> <p>So I plugged it into my laptop. Opened <code>dmesg -w</code> and... Boom. It showed up! The system saw it. That moment felt great too bad I was alone at the time. I called my friend, who had been getting updates on the progress, just to share the win.</p> <p>I flashed MicroPython onto it and uploaded a quick script. No errors.</p> <p>Even though I was technically out of the woods, I just had to try uploading an Arduino sketch as well. Again, no errors. The board responded perfectly.</p> <p>After all the measuring, heating, nudging, and reflowing, the mystery was solved. It really was the RP2040 all along likely shorted internally and quietly dumping current into heat. No external signs, just failure.</p> <p>But now? The board was healthy again.</p> <p>What caused it to fail in the first place? We\u2019ll never know.</p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/","title":"Journey to Shreveport Bossier Maker Faire","text":"<p>In 2024, I received an invitation to join the Shreveport-Bossier Maker Faire . I was excited to share how we use innovation and digital fabrication to empower people in remote regions of Iceland, through the network of Icelandic Fab Labs, which has been active since 2007 when the first lab opened in Vestmannaeyjar. I wanted to highlight how Fab Lab \u00cdsafj\u00f6r\u00f0ur  has made its mark and created local as well as global impact.</p> <p></p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#pre-trip","title":"Pre-Trip","text":"<p>Preparing for the trip took some effort, coordinating schedules, finishing projects at the lab, and planning the talk. The day before departure, I traveled to Reykjav\u00edk and spent the day at Fab Lab Reykjav\u00edk  to catch up with colleagues and narrow down what I could share at the Maker Faire.</p> <p>I left Reykjav\u00edk early in the morning, flew through JFK and Atlanta, and finally arrived in Shreveport on Friday morning after some delays and a missed connection. Tired, but excited. Joel picked me up at the airport in his Maker Van. He\u2019s a true community engager like no other. On the same flight was Hunter, part of the Power Racing Series, where people modify toy cars to race them at high speeds.</p> <p> </p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#visiting-sci-port","title":"Visiting Sci-Port","text":"<p>After the airport pickup, we went straight to Sci-Port to meet the Maker Faire team. Sci-Port is a discovery center with impressive exhibitions and a newly established Makerspace/STEM center.</p> <p>Friday was spent setting up for the Faire. Because of the travel delays, I unfortunately missed a scheduled TV interview in the morning. But I got to meet many of the people I had connected with online, and that\u2019s always a great moment.</p> <p></p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#people-i-met","title":"People I Met","text":"<p>Clint Coleman \u2013 Program Director, North Louisiana STEM Alliance North Louisiana STEM Alliance (LaSTEM)  promotes STEM education across the region by building collaborative programs and partnerships.</p> <p>Dianne M. Clark \u2013 Executive Director, Sci-Port Discovery Center  Leads the center in delivering hands-on science experiences to families, students, and schools throughout the region.</p> <p>Joel Leonard \u2013 Maker Faire organizer / community engager Maker of the Thorminator and a passionate advocate for connecting makers around the world.</p> <p>Hunter  Leonard \u2013 Power Racing Series Part of the Power Racing Series , where participants modify toy cars for high-speed racing a wild, fun, and creatively engineered spectacle. This is Hunters site personal site. Hunter works for BETA technologies An aerospace company manufacturing electric planes. </p> <p>Jennifer Johnson \u2013 STEM Education Coordinator, Sci-Port Discovery Center  STEM education specialist focused on outreach, curriculum design, and hands-on learning experiences. Passionate about making science accessible and engaging for all ages.</p> <p>John Galiotos \u2013 Southern University at Shreveport, Louisiana Works to advance applied STEM education and workforce development through technical programs and academic partnerships.</p> <p>Heather Kleiner \u2013 Director, Sci-Port Discovery Center  Oversees programs and initiatives that bridge science education, innovation, and public engagement.</p> <p>Nicola Mattis \u2013 Founder and CMO, Brand Engineer Studios  Works at the intersection of design, technology, and brand strategy helping creators and companies shape their identity and grow.</p> <p>Maria Esquela \u2013 Founding member, e-NABLE Alliance  Part of a global volunteer movement that designs and distributes free 3D-printed prosthetics for people in need, especially children.</p> <p>Meeting these people gave me a clearer view of how strong and diverse the maker community is here in Louisiana and reminded me how important it is to build networks across regions.</p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#giving-the-keynote","title":"Giving the Keynote","text":"<p>On Saturday, I had the honor of delivering the keynote talk titled:</p> <p>Arctic Innovation: Impacting Iceland and Beyond</p> <p>I spoke about how innovation isn\u2019t something that only happens in Silicon Valley or big research centers. It can happen in small, remote towns, even on the edge of the Arctic where we create the right space and support system.</p> <p>Using the metaphor of a sports stadium, I explored what it takes to build an \"innovation stadium\" a place where people can train, collaborate, and thrive. I showed how our Fab Lab in \u00cdsafj\u00f6r\u00f0ur works as that kind of space, and I shared stories of people and projects from our community who are making a real impact.</p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#slide-deck","title":"Slide Deck","text":"<p>Here are the slides from my keynote talk at the 2025 Shreveport-Bossier Maker Faire:</p> <p>Your browser does not support iframes.</p> <p>Slide deck: Arctic Innovation \u2013 Impacting Iceland and Beyond </p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#recap-core-messages-from-the-talk","title":"Recap: Core Messages from the Talk","text":"<p>Innovation = Idea \u00d7 Value Innovation happens when creativity meets relevance.</p> <p>Ideas require imagination, insight, curiosity, and courage.</p> <p>Value is built on relevance, feasibility, impact, sustainability, and timing.</p> <p>Innovation needs a space like a stadium for sports, we need dedicated places (like Fab Labs) where ideas can be trained, tested, and shared.</p> <p>Superstars don\u2019t rise alone it takes roles, support, and systems to nurture innovation.</p> <p>A strong network is like a relay team ideas move faster and go further when passed, not hoarded.</p> <p>I also joined a panel discussion about the Maker Faire community and the role it plays in our local contexts.</p> <p> </p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#reflections-moments","title":"Reflections &amp; Moments","text":"<p>The Maker Faire itself was a vibrant celebration of creativity. From robotics and CNC demos to handmade crafts and educational exhibits, it was inspiring to see so many people from different backgrounds building and sharing.</p> <p>I met incredible makers, educators, and organizers, and heard about the unique challenges and opportunities in Louisiana's maker ecosystem. One thing was clear: the spirit of making is alive and well here.</p> <p></p>"},{"location":"journal/journey-to-shreveport-bossier-maker-faire/#gratitude","title":"Gratitude","text":"<p>Huge thanks to the Maker Faire team for the warm welcome, and to everyone who made time to connect, share stories, and show me around.</p> <p>Let\u2019s keep the network going, whether it's across the Atlantic or just across town.</p> <p></p>"},{"location":"journal/archive/2025/","title":"2025","text":""},{"location":"journal/archive/2024/","title":"2024","text":""},{"location":"journal/archive/2023/","title":"2023","text":""},{"location":"journal/archive/2022/","title":"2022","text":""},{"location":"journal/archive/2021/","title":"2021","text":""},{"location":"journal/category/linux-mint/","title":"Linux Mint","text":""},{"location":"journal/category/maikerfair/","title":"Maikerfair","text":""},{"location":"journal/category/trips/","title":"Trips","text":""},{"location":"journal/category/journey/","title":"Journey","text":""},{"location":"journal/category/nvim/","title":"nvim","text":""},{"location":"journal/category/terminal/","title":"terminal","text":""},{"location":"journal/category/journal/","title":"Journal","text":""},{"location":"journal/category/electronics/","title":"Electronics","text":""},{"location":"journal/category/fab-lab/","title":"Fab Lab","text":""}]}